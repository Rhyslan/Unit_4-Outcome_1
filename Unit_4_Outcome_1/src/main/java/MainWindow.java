
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.HexFormat;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 *
 * @author dylan
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgpSearchCategories = new javax.swing.ButtonGroup();
        bgpGameSelection = new javax.swing.ButtonGroup();
        bgpClassification = new javax.swing.ButtonGroup();
        bgpRating = new javax.swing.ButtonGroup();
        bgpStatus = new javax.swing.ButtonGroup();
        srpSidebarScroll = new javax.swing.JScrollPane();
        srpSidebarScroll.getVerticalScrollBar().setUnitIncrement(20);
        pnlSidebarInner = new javax.swing.JPanel();
        btnSearchMenuToggle = new javax.swing.JButton();
        pnlSearchMenu = new javax.swing.JPanel();
        pnlSearchMenu.setVisible(false);
        txtSearchQuery = new javax.swing.JTextField();
        btnSearchButton = new javax.swing.JButton();
        btnAdvancedSearchToggle = new javax.swing.JButton();
        btnAdvancedSearchToggle.setVisible(false);
        pnlAdvancedSearch = new javax.swing.JPanel();
        pnlAdvancedSearch.setVisible(false);
        strAdvancedPrevious = "AWC";
        lblSearchCategory = new javax.swing.JLabel();
        rtnTitleCategory = new javax.swing.JRadioButton();
        rtnNotesCategory = new javax.swing.JRadioButton();
        cbxExactSearch = new javax.swing.JCheckBox();
        lblFilters = new javax.swing.JLabel();
        btnClearFilters = new javax.swing.JButton();
        btnClassificationToggle = new javax.swing.JButton();
        pnlClassificationFilter = new javax.swing.JPanel();
        pnlClassificationFilter.setVisible(false);
        cbxRatedG = new javax.swing.JCheckBox();
        cbxRatedPG = new javax.swing.JCheckBox();
        cbxRatedM = new javax.swing.JCheckBox();
        cbxRatedMA15 = new javax.swing.JCheckBox();
        cbxRatedR18 = new javax.swing.JCheckBox();
        btnMACLToggle = new javax.swing.JButton();
        pnlMACLFilter = new javax.swing.JPanel();
        pnlMACLFilter.setVisible(false);
        lblAbsoluteMinMACL = new javax.swing.JLabel();
        lblAbsoluteMaxMACL = new javax.swing.JLabel();
        lblSetMinMACL = new javax.swing.JLabel();
        txtSetMinMACL = new javax.swing.JTextField();
        txtSetMaxMACL = new javax.swing.JTextField();
        lblSetMaxMACL = new javax.swing.JLabel();
        rslMACLSlider = new JRangeSlider();
        btnRatingToggle = new javax.swing.JButton();
        pnlRatingFilter = new javax.swing.JPanel();
        pnlRatingFilter.setVisible(false);
        cbx0Stars = new javax.swing.JCheckBox();
        cbx1Star = new javax.swing.JCheckBox();
        cbx2Stars = new javax.swing.JCheckBox();
        cbx3Stars = new javax.swing.JCheckBox();
        cbx4Stars = new javax.swing.JCheckBox();
        cbx5Stars = new javax.swing.JCheckBox();
        btnStatusToggle = new javax.swing.JButton();
        pnlStatusFilter = new javax.swing.JPanel();
        pnlStatusFilter.setVisible(false);
        cbxNotPlaying = new javax.swing.JCheckBox();
        cbxInProgress = new javax.swing.JCheckBox();
        cbxFinishedGame = new javax.swing.JCheckBox();
        cbxFinishedStory = new javax.swing.JCheckBox();
        cbxAbandoned = new javax.swing.JCheckBox();
        btnYearToggle = new javax.swing.JButton();
        pnlYearFilter = new javax.swing.JPanel();
        pnlYearFilter.setVisible(false);
        lblAbsoluteEarliestYear = new javax.swing.JLabel();
        lblAbsoluteLatestYear = new javax.swing.JLabel();
        rslYearSlider = new JRangeSlider();
        txtSetMinYear = new javax.swing.JTextField();
        txtSetMaxYear = new javax.swing.JTextField();
        lblSetMaxYear = new javax.swing.JLabel();
        lblSetMinYear = new javax.swing.JLabel();
        tbpGameEntries = new javax.swing.JTabbedPane();
        mnbTitleBar = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mniLoad = new javax.swing.JMenuItem();
        mniSave = new javax.swing.JMenuItem();
        mniQuit = new javax.swing.JMenuItem();
        mnuGame = new javax.swing.JMenu();
        mniAddNew = new javax.swing.JMenuItem();
        mniUpdate = new javax.swing.JMenuItem();
        mniRemove = new javax.swing.JMenuItem();
        mnuHelp = new javax.swing.JMenu();
        mniAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Level-Up Library - Main Window");
        setMinimumSize(new java.awt.Dimension(1024, 600));
        setName("MainWindow"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1024, 600));
        setSize(new java.awt.Dimension(1024, 600));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        srpSidebarScroll.setBorder(null);
        srpSidebarScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        srpSidebarScroll.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        srpSidebarScroll.setEnabled(false);

        pnlSidebarInner.setEnabled(false);
        pnlSidebarInner.setMinimumSize(new java.awt.Dimension(0, 0));
        pnlSidebarInner.setPreferredSize(new java.awt.Dimension(230, 1016));
        org.jdesktop.swingx.VerticalLayout verticalLayout1 = new org.jdesktop.swingx.VerticalLayout();
        verticalLayout1.setGap(5);
        pnlSidebarInner.setLayout(verticalLayout1);

        btnSearchMenuToggle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Collapsed.png"))); // NOI18N
        btnSearchMenuToggle.setText("Search");
        btnSearchMenuToggle.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        btnSearchMenuToggle.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        btnSearchMenuToggle.setIconTextGap(70);
        btnSearchMenuToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchMenuToggleActionPerformed(evt);
            }
        });
        pnlSidebarInner.add(btnSearchMenuToggle);

        pnlSearchMenu.setPreferredSize(new java.awt.Dimension(230, 40));

        txtSearchQuery.setToolTipText("");

        btnSearchButton.setText("Search");
        btnSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlSearchMenuLayout = new javax.swing.GroupLayout(pnlSearchMenu);
        pnlSearchMenu.setLayout(pnlSearchMenuLayout);
        pnlSearchMenuLayout.setHorizontalGroup(
            pnlSearchMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSearchMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtSearchQuery, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSearchButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlSearchMenuLayout.setVerticalGroup(
            pnlSearchMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSearchMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSearchMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearchQuery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchButton))
                .addGap(5, 5, 5))
        );

        pnlSidebarInner.add(pnlSearchMenu);

        btnAdvancedSearchToggle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Collapsed.png"))); // NOI18N
        btnAdvancedSearchToggle.setText("Advanced");
        btnAdvancedSearchToggle.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        btnAdvancedSearchToggle.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        btnAdvancedSearchToggle.setIconTextGap(62);
        btnAdvancedSearchToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdvancedSearchToggleActionPerformed(evt);
            }
        });
        pnlSidebarInner.add(btnAdvancedSearchToggle);

        lblSearchCategory.setText("Category:");

        bgpSearchCategories.add(rtnTitleCategory);
        rtnTitleCategory.setSelected(true);
        rtnTitleCategory.setText("Title");

        bgpSearchCategories.add(rtnNotesCategory);
        rtnNotesCategory.setText("Notes");

        cbxExactSearch.setText("Exact Match:");
        cbxExactSearch.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        cbxExactSearch.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        cbxExactSearch.setIconTextGap(10);

        javax.swing.GroupLayout pnlAdvancedSearchLayout = new javax.swing.GroupLayout(pnlAdvancedSearch);
        pnlAdvancedSearch.setLayout(pnlAdvancedSearchLayout);
        pnlAdvancedSearchLayout.setHorizontalGroup(
            pnlAdvancedSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAdvancedSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAdvancedSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSearchCategory)
                    .addComponent(rtnTitleCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rtnNotesCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxExactSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlAdvancedSearchLayout.setVerticalGroup(
            pnlAdvancedSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAdvancedSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblSearchCategory)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rtnTitleCategory)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rtnNotesCategory)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cbxExactSearch)
                .addContainerGap())
        );

        pnlSidebarInner.add(pnlAdvancedSearch);

        lblFilters.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFilters.setText("Filters");
        lblFilters.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        lblFilters.setMinimumSize(new java.awt.Dimension(31, 20));
        lblFilters.setPreferredSize(new java.awt.Dimension(31, 20));
        pnlSidebarInner.add(lblFilters);

        btnClearFilters.setText("Clear Filters");
        btnClearFilters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearFiltersActionPerformed(evt);
            }
        });
        pnlSidebarInner.add(btnClearFilters);

        btnClassificationToggle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Collapsed.png"))); // NOI18N
        btnClassificationToggle.setText("Classification");
        btnClassificationToggle.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        btnClassificationToggle.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        btnClassificationToggle.setIconTextGap(56);
        btnClassificationToggle.setInheritsPopupMenu(true);
        btnClassificationToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClassificationToggleActionPerformed(evt);
            }
        });
        pnlSidebarInner.add(btnClassificationToggle);

        pnlClassificationFilter.setPreferredSize(new java.awt.Dimension(230, 85));

        bgpClassification.add(cbxRatedG);
        cbxRatedG.setText("G");
        cbxRatedG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxRatedGActionPerformed(evt);
            }
        });

        bgpClassification.add(cbxRatedPG);
        cbxRatedPG.setText("PG");
        cbxRatedPG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxRatedPGActionPerformed(evt);
            }
        });

        bgpClassification.add(cbxRatedM);
        cbxRatedM.setText("M");
        cbxRatedM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxRatedMActionPerformed(evt);
            }
        });

        bgpClassification.add(cbxRatedMA15);
        cbxRatedMA15.setText("MA15+");
        cbxRatedMA15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxRatedMA15ActionPerformed(evt);
            }
        });

        bgpClassification.add(cbxRatedR18);
        cbxRatedR18.setText("R18+");
        cbxRatedR18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxRatedR18ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlClassificationFilterLayout = new javax.swing.GroupLayout(pnlClassificationFilter);
        pnlClassificationFilter.setLayout(pnlClassificationFilterLayout);
        pnlClassificationFilterLayout.setHorizontalGroup(
            pnlClassificationFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlClassificationFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlClassificationFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlClassificationFilterLayout.createSequentialGroup()
                        .addComponent(cbxRatedM, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cbxRatedMA15, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cbxRatedR18, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlClassificationFilterLayout.createSequentialGroup()
                        .addComponent(cbxRatedG, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cbxRatedPG, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlClassificationFilterLayout.setVerticalGroup(
            pnlClassificationFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlClassificationFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlClassificationFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxRatedG)
                    .addComponent(cbxRatedPG))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlClassificationFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxRatedM)
                    .addComponent(cbxRatedMA15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbxRatedR18)
                .addGap(5, 5, 5))
        );

        pnlSidebarInner.add(pnlClassificationFilter);

        btnMACLToggle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Collapsed.png"))); // NOI18N
        btnMACLToggle.setText("MACL");
        btnMACLToggle.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        btnMACLToggle.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        btnMACLToggle.setIconTextGap(78);
        btnMACLToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMACLToggleActionPerformed(evt);
            }
        });
        pnlSidebarInner.add(btnMACLToggle);

        lblAbsoluteMinMACL.setText("0");

        lblAbsoluteMaxMACL.setText("999");

        lblSetMinMACL.setText("Min:");

        txtSetMinMACL.setText("0");
        txtSetMinMACL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSetMinMACLActionPerformed(evt);
            }
        });

        txtSetMaxMACL.setText("999");
        txtSetMaxMACL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSetMaxMACLActionPerformed(evt);
            }
        });

        lblSetMaxMACL.setText("Max:");

        rslMACLSlider.setMaximum(999);
        rslMACLSlider.setSecondValue(999);
        rslMACLSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rslMACLSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout rslMACLSliderLayout = new javax.swing.GroupLayout(rslMACLSlider);
        rslMACLSlider.setLayout(rslMACLSliderLayout);
        rslMACLSliderLayout.setHorizontalGroup(
            rslMACLSliderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        rslMACLSliderLayout.setVerticalGroup(
            rslMACLSliderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout pnlMACLFilterLayout = new javax.swing.GroupLayout(pnlMACLFilter);
        pnlMACLFilter.setLayout(pnlMACLFilterLayout);
        pnlMACLFilterLayout.setHorizontalGroup(
            pnlMACLFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMACLFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMACLFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rslMACLSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMACLFilterLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblAbsoluteMaxMACL, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlMACLFilterLayout.createSequentialGroup()
                        .addGroup(pnlMACLFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlMACLFilterLayout.createSequentialGroup()
                                .addGroup(pnlMACLFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblSetMinMACL, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblSetMaxMACL, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(pnlMACLFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtSetMinMACL, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtSetMaxMACL, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(pnlMACLFilterLayout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(lblAbsoluteMinMACL, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlMACLFilterLayout.setVerticalGroup(
            pnlMACLFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMACLFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMACLFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAbsoluteMinMACL)
                    .addComponent(lblAbsoluteMaxMACL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rslMACLSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addGroup(pnlMACLFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSetMinMACL)
                    .addComponent(txtSetMinMACL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMACLFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSetMaxMACL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSetMaxMACL))
                .addContainerGap())
        );

        pnlSidebarInner.add(pnlMACLFilter);

        btnRatingToggle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Collapsed.png"))); // NOI18N
        btnRatingToggle.setText("Rating");
        btnRatingToggle.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        btnRatingToggle.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        btnRatingToggle.setIconTextGap(78);
        btnRatingToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRatingToggleActionPerformed(evt);
            }
        });
        pnlSidebarInner.add(btnRatingToggle);

        pnlRatingFilter.setPreferredSize(new java.awt.Dimension(230, 160));

        bgpRating.add(cbx0Stars);
        cbx0Stars.setText("None");
        cbx0Stars.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbx0StarsActionPerformed(evt);
            }
        });

        bgpRating.add(cbx1Star);
        cbx1Star.setText("1 Star");
        cbx1Star.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbx1StarActionPerformed(evt);
            }
        });

        bgpRating.add(cbx2Stars);
        cbx2Stars.setText("2 Stars");
        cbx2Stars.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbx2StarsActionPerformed(evt);
            }
        });

        bgpRating.add(cbx3Stars);
        cbx3Stars.setText("3 Stars");
        cbx3Stars.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbx3StarsActionPerformed(evt);
            }
        });

        bgpRating.add(cbx4Stars);
        cbx4Stars.setText("4 Stars");
        cbx4Stars.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbx4StarsActionPerformed(evt);
            }
        });

        bgpRating.add(cbx5Stars);
        cbx5Stars.setText("5 Stars");
        cbx5Stars.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbx5StarsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlRatingFilterLayout = new javax.swing.GroupLayout(pnlRatingFilter);
        pnlRatingFilter.setLayout(pnlRatingFilterLayout);
        pnlRatingFilterLayout.setHorizontalGroup(
            pnlRatingFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRatingFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlRatingFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbx0Stars, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbx1Star, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbx2Stars, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbx3Stars, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbx4Stars, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbx5Stars, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlRatingFilterLayout.setVerticalGroup(
            pnlRatingFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRatingFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbx0Stars)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbx1Star)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbx2Stars)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbx3Stars)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbx4Stars)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbx5Stars)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlSidebarInner.add(pnlRatingFilter);

        btnStatusToggle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Collapsed.png"))); // NOI18N
        btnStatusToggle.setText("Status");
        btnStatusToggle.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        btnStatusToggle.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        btnStatusToggle.setIconTextGap(74);
        btnStatusToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStatusToggleActionPerformed(evt);
            }
        });
        pnlSidebarInner.add(btnStatusToggle);

        bgpStatus.add(cbxNotPlaying);
        cbxNotPlaying.setText("NP");
        cbxNotPlaying.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxNotPlayingActionPerformed(evt);
            }
        });

        bgpStatus.add(cbxInProgress);
        cbxInProgress.setText("IP");
        cbxInProgress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxInProgressActionPerformed(evt);
            }
        });

        bgpStatus.add(cbxFinishedGame);
        cbxFinishedGame.setText("FG");
        cbxFinishedGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxFinishedGameActionPerformed(evt);
            }
        });

        bgpStatus.add(cbxFinishedStory);
        cbxFinishedStory.setText("FS");
        cbxFinishedStory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxFinishedStoryActionPerformed(evt);
            }
        });

        bgpStatus.add(cbxAbandoned);
        cbxAbandoned.setText("AB");
        cbxAbandoned.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxAbandonedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlStatusFilterLayout = new javax.swing.GroupLayout(pnlStatusFilter);
        pnlStatusFilter.setLayout(pnlStatusFilterLayout);
        pnlStatusFilterLayout.setHorizontalGroup(
            pnlStatusFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlStatusFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlStatusFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlStatusFilterLayout.createSequentialGroup()
                        .addComponent(cbxNotPlaying, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cbxInProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlStatusFilterLayout.createSequentialGroup()
                        .addComponent(cbxFinishedGame, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cbxFinishedStory, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cbxAbandoned, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlStatusFilterLayout.setVerticalGroup(
            pnlStatusFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlStatusFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlStatusFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxNotPlaying)
                    .addComponent(cbxInProgress))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlStatusFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxFinishedGame)
                    .addComponent(cbxFinishedStory))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbxAbandoned)
                .addGap(6, 6, 6))
        );

        pnlSidebarInner.add(pnlStatusFilter);

        btnYearToggle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Collapsed.png"))); // NOI18N
        btnYearToggle.setText("Year");
        btnYearToggle.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        btnYearToggle.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        btnYearToggle.setIconTextGap(79);
        btnYearToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnYearToggleActionPerformed(evt);
            }
        });
        pnlSidebarInner.add(btnYearToggle);

        lblAbsoluteEarliestYear.setText("1958");

        lblAbsoluteLatestYear.setText("2023");

        rslYearSlider.setMaximum(2023);
        rslYearSlider.setMinimum(1958);
        rslYearSlider.setSecondValue(2023);
        rslYearSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rslYearSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout rslYearSliderLayout = new javax.swing.GroupLayout(rslYearSlider);
        rslYearSlider.setLayout(rslYearSliderLayout);
        rslYearSliderLayout.setHorizontalGroup(
            rslYearSliderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        rslYearSliderLayout.setVerticalGroup(
            rslYearSliderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        txtSetMinYear.setText("1958");
        txtSetMinYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSetMinYearActionPerformed(evt);
            }
        });

        txtSetMaxYear.setText("2023");
        txtSetMaxYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSetMaxYearActionPerformed(evt);
            }
        });

        lblSetMaxYear.setText("Latest:");

        lblSetMinYear.setText("Earliest:");

        javax.swing.GroupLayout pnlYearFilterLayout = new javax.swing.GroupLayout(pnlYearFilter);
        pnlYearFilter.setLayout(pnlYearFilterLayout);
        pnlYearFilterLayout.setHorizontalGroup(
            pnlYearFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlYearFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlYearFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rslYearSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlYearFilterLayout.createSequentialGroup()
                        .addGroup(pnlYearFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSetMinYear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblSetMaxYear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlYearFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSetMaxYear, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSetMinYear, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(92, 92, 92))
                    .addGroup(pnlYearFilterLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(lblAbsoluteEarliestYear, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblAbsoluteLatestYear, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlYearFilterLayout.setVerticalGroup(
            pnlYearFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlYearFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlYearFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAbsoluteEarliestYear)
                    .addComponent(lblAbsoluteLatestYear))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rslYearSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addGroup(pnlYearFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSetMinYear)
                    .addComponent(txtSetMinYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlYearFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSetMaxYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSetMaxYear))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlSidebarInner.add(pnlYearFilter);

        srpSidebarScroll.setViewportView(pnlSidebarInner);

        tbpGameEntries.setPreferredSize(new java.awt.Dimension(778, 577));

        mnuFile.setText("File");

        mniLoad.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mniLoad.setText("Load");
        mniLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniLoadActionPerformed(evt);
            }
        });
        mnuFile.add(mniLoad);

        mniSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mniSave.setText("Save");
        mniSave.setEnabled(false);
        mniSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniSaveActionPerformed(evt);
            }
        });
        mnuFile.add(mniSave);

        mniQuit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mniQuit.setText("Quit");
        mniQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniQuitActionPerformed(evt);
            }
        });
        mnuFile.add(mniQuit);

        mnbTitleBar.add(mnuFile);

        mnuGame.setText("Game");

        mniAddNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mniAddNew.setText("Add New");
        mniAddNew.setEnabled(false);
        mniAddNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniAddNewActionPerformed(evt);
            }
        });
        mnuGame.add(mniAddNew);

        mniUpdate.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mniUpdate.setText("Update");
        mniUpdate.setEnabled(false);
        mniUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniUpdateActionPerformed(evt);
            }
        });
        mnuGame.add(mniUpdate);

        mniRemove.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        mniRemove.setText("Remove");
        mniRemove.setEnabled(false);
        mniRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniRemoveActionPerformed(evt);
            }
        });
        mnuGame.add(mniRemove);

        mnbTitleBar.add(mnuGame);

        mnuHelp.setText("Help");

        mniAbout.setText("About");
        mniAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniAboutActionPerformed(evt);
            }
        });
        mnuHelp.add(mniAbout);

        mnbTitleBar.add(mnuHelp);

        setJMenuBar(mnbTitleBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(srpSidebarScroll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tbpGameEntries, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(srpSidebarScroll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(tbpGameEntries, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //<editor-fold defaultstate="expanded" desc="Global Variables">
    // Paths to encoded and temp decoded database
    public static Path pthDatabaseFilePath = null;
    public static Path pthTempFile = null;
    
    // Loaded database storage
    // smaGameData Array Stucture: [id, platform, boxart path, title, length, class, year, status, rating, notes]
    public static String[][] smaGameData = null;
    public static Map<String, Map> mapLoadedData = new HashMap<>();
    public static Map<String, Map> mapPlatforms = new HashMap<>();
    public static Document docXMLFile = null;
    public static String[] sarPlatformList = null;
    public static int intPlatformCount = 0;
    
    // Encryption Key
    public static final byte[] barEncryptionKey = 
            HexFormat.ofDelimiter(" ").parseHex("29 20 4e 9b 2b da 82 04 21 94 8b c4 d5 99 53 2c");
    
    // States
    public static boolean blnIsSaved = true;
    public static String strSelectedGame = "N/A";
    //</editor-fold>
    
    //<editor-fold defaultstate="expanded" desc="Local Variables">
    // States
    // Structure: [class, macl, rate, status, year]
    private static final String[][] smaFilterStates = {{"N/A"}, {"0", "999"}, {"N/A"}, {"N/A"}, {"1956", 
        String.valueOf(mthGetCurrentYear())}};
    private static String strAdvancedPrevious = "N/A";
    
    // Icons
    private final ImageIcon icnCollapsedIcon = new ImageIcon(getClass().getResource("/Collapsed.png"));
    private final ImageIcon icnExpandedIcon = new ImageIcon(getClass().getResource("/Expanded.png"));
    //</editor-fold>
    
    /**
     * Based on the provided current states of the search and advanced search interface elements, determine the new 
     *  states and return them
     * @param strStates
     * @return 
     */
    private static String mthDetermineVisibilityStates(String strStates) {
        /**
         ************ KEY *************
         * OS = Opening search
         * CS = Closing search
         * AWO = Advanced was open
         * AWC = Advanced was closed
         * SIO = Search is open
         * OA = Opening Advanced
         * CA = Closing advanced
         */
        
        Map<String, String> mapFinalStates = new HashMap<>();
        mapFinalStates.put("CS, AWO", "false, false");
        mapFinalStates.put("CS, AWC", "false, false");
        mapFinalStates.put("OS, AWO", "true, true");
        mapFinalStates.put("OS, AWC", "true, false");
        mapFinalStates.put("SIO, OA", "true, true");
        mapFinalStates.put("SIO, CA", "true, false");
        
        return mapFinalStates.get(strStates);
    }    
    
    /**
     * Update the user interface to accommodate for changes
     * Clears the interface first to not have duplicated tabs or entries
     * Stores all tabs and entries in the maps declared above
     */
    public static void mthUpdateInterface() {
        // Clear interface
        tbpGameEntries.removeAll();
        
        // Add and store tabs based on what platforms there are
        Map<String, PlatformTab> mapPlatformTabs = new HashMap<>();
        for (int i = 0; i < intPlatformCount; i++) {
            mapPlatformTabs.put(sarPlatformList[i], new PlatformTab());
            tbpGameEntries.addTab(sarPlatformList[i], mapPlatformTabs.get(sarPlatformList[i]));
        }
        
        // Create new map for each platform to contain the game entries
        for (String strCurrentPlatform : sarPlatformList) {
            Map<String, GameEntry> mapGames = new HashMap<>();
            mapPlatforms.put(strCurrentPlatform, mapGames);

            Map<String, String[]> mapGameData = new HashMap<>();
            mapLoadedData.put(strCurrentPlatform, mapGameData);
        }

        // Create, store, and add game entries to the interface
        for (String[] sarCurrentGameData : smaGameData) {
            Map<String, GameEntry> mapCurrentPlatformUI = mapPlatforms.get(sarCurrentGameData[1]);
            mapCurrentPlatformUI.put(sarCurrentGameData[0], new GameEntry());

            GameEntry gmeCurrentGame = mapCurrentPlatformUI.get(sarCurrentGameData[0]);
            gmeCurrentGame.mthSetFields(sarCurrentGameData);

            PlatformTab pmtCurrentTab = mapPlatformTabs.get(sarCurrentGameData[1]);
            pmtCurrentTab.tabMainPanel.add(gmeCurrentGame);
            bgpGameSelection.add(gmeCurrentGame);

            Map mapCurrentPlatformData = mapLoadedData.get(sarCurrentGameData[1]);
            mapCurrentPlatformData.put(sarCurrentGameData[0], sarCurrentGameData);
        }
    }
    
    /**
     * Update the interface for the current tab based on the filters selected
     * Sets entries that don't match the filters and are still to be invisible and sets them to visible if they do 
     *  match, but not if they are invisible
     * Only one filter per category can be selected at a time
     */
    private void mthApplyFilters() {
        // Check that there is data
        if (smaGameData == null) {
            JOptionPane.showMessageDialog(null, "Please load data first", "No data", 
                    JOptionPane.WARNING_MESSAGE);
        } else {
            // Get the current tab and loop through each game entry
            PlatformTab pmtCurrentTab = (PlatformTab) tbpGameEntries.getSelectedComponent();
            for (int i = 1; i < pmtCurrentTab.tabMainPanel.getComponentCount(); i++) {
                GameEntry gmCcurrentGame = (GameEntry) pmtCurrentTab.tabMainPanel.getComponent(i);
                
                // Classification filter
                if (gmCcurrentGame.sarThisGameData[5].equals(smaFilterStates[0][0]) || 
                        "N/A".equals(smaFilterStates[0][0])) {
                    gmCcurrentGame.setVisible(true);
                } else {
                    gmCcurrentGame.setVisible(false);
                }
                
                // Length filter (range)
                if (Integer.parseInt(gmCcurrentGame.sarThisGameData[4]) >= Integer.parseInt(smaFilterStates[1][0]) && 
                        Integer.parseInt(gmCcurrentGame.sarThisGameData[4]) <= Integer.parseInt(smaFilterStates[1][1]) && 
                            gmCcurrentGame.isVisible()) {
                    gmCcurrentGame.setVisible(true);
                } else {
                    gmCcurrentGame.setVisible(false);
                }
                
                // Rating filter
                if (gmCcurrentGame.sarThisGameData[8].equals(smaFilterStates[2][0]) && gmCcurrentGame.isVisible()) {
                    gmCcurrentGame.setVisible(true);
                } else if ("N/A".equals(smaFilterStates[2][0])) {
                    gmCcurrentGame.setVisible(true);
                } else {
                    gmCcurrentGame.setVisible(false);
                }
                
                // Play status filter
                if (gmCcurrentGame.sarThisGameData[7].equals(smaFilterStates[3][0]) && gmCcurrentGame.isVisible()) {
                    gmCcurrentGame.setVisible(true);
                } else if ("N/A".equals(smaFilterStates[3][0])) {
                    gmCcurrentGame.setVisible(true);
                } else {
                    gmCcurrentGame.setVisible(false);
                }
                
                // Release Year filter (range)
                if (Integer.parseInt(gmCcurrentGame.sarThisGameData[6]) >= Integer.parseInt(smaFilterStates[4][0]) && 
                        Integer.parseInt(gmCcurrentGame.sarThisGameData[6]) <= Integer.parseInt(smaFilterStates[4][1]) && 
                            gmCcurrentGame.isVisible()) {
                    gmCcurrentGame.setVisible(true);
                } else {
                    gmCcurrentGame.setVisible(false);
                }
            }
        }
    }
    
    public static int mthGetCurrentYear() {
        // Gets the current year
        DateFormat dtDdateFormat = new SimpleDateFormat("yyyy");
        Date dteDate = new Date();
        int intCurrentYear = Integer.parseInt(dtDdateFormat.format(dteDate));
        return intCurrentYear;
    }
    
    //<editor-fold defaultstate="collapsed" desc="UI Setup Functions">
    private void btnSearchMenuToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchMenuToggleActionPerformed
        /**
         * Determines what the visibility of both the normal search and advanced search should be and sets them and the 
         *  appropriate icons
         */
        
        boolean blnSearchState = pnlSearchMenu.isVisible();
        boolean blnAdvancedState = pnlAdvancedSearch.isVisible();
        String strSearchCode = "N/A";
        String strAdvancedCode = "N/A";
        
        // Determine current states
        if (blnSearchState == true) strSearchCode = "CS";
        else if (blnSearchState == false) strSearchCode = "OS";
        if (blnAdvancedState == true) strAdvancedCode = "AWO";
        else if (blnAdvancedState == false) strAdvancedCode = "AWC";
        if ("OS".equals(strSearchCode)) strAdvancedCode = strAdvancedPrevious;
        
        // Get new states and store
        String strNewStates = mthDetermineVisibilityStates(strSearchCode + ", " + strAdvancedCode);
        strAdvancedPrevious = strAdvancedCode;
        String[] sarBools = strNewStates.split(", ");
        
        // Set new states
        pnlSearchMenu.setVisible(Boolean.parseBoolean(sarBools[0]));
        btnAdvancedSearchToggle.setVisible(Boolean.parseBoolean(sarBools[0]));
        pnlAdvancedSearch.setVisible(Boolean.parseBoolean(sarBools[1]));
        
        // Set icons
        if (pnlSearchMenu.isVisible()) btnSearchMenuToggle.setIcon(icnExpandedIcon);
        else btnSearchMenuToggle.setIcon(icnCollapsedIcon);
    }//GEN-LAST:event_btnSearchMenuToggleActionPerformed

    private void btnAdvancedSearchToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdvancedSearchToggleActionPerformed
        /**
         * Determines what the visibility of both the normal search and advanced search should be and sets them and the 
         *  appropriate icons
         */
        
        boolean blnAdvancedState = pnlAdvancedSearch.isVisible();
        String stSearchCode = "SIO";
        String strAdvancedCode = "N/A";
        
        // Determine current states
        if (blnAdvancedState == true) strAdvancedCode = "CA";
        else if (blnAdvancedState == false) strAdvancedCode = "OA";
        
        // Get new states and store
        strAdvancedPrevious = strAdvancedCode;
        String strNewStates = mthDetermineVisibilityStates(stSearchCode + ", " + strAdvancedCode);
        String[] sarBools = strNewStates.split(", ");
        
        // Set new states
        pnlSearchMenu.setVisible(Boolean.parseBoolean(sarBools[0]));
        btnAdvancedSearchToggle.setVisible(Boolean.parseBoolean(sarBools[0]));
        pnlAdvancedSearch.setVisible(Boolean.parseBoolean(sarBools[1]));
        
        // Set icons
        if (pnlAdvancedSearch.isVisible()) btnAdvancedSearchToggle.setIcon(icnExpandedIcon);
        else btnAdvancedSearchToggle.setIcon(icnCollapsedIcon);
    }//GEN-LAST:event_btnAdvancedSearchToggleActionPerformed

    private void btnClassificationToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClassificationToggleActionPerformed
        // Toggle visibility and set icons
        pnlClassificationFilter.setVisible(!pnlClassificationFilter.isVisible());
        if (pnlClassificationFilter.isVisible()) btnClassificationToggle.setIcon(icnExpandedIcon);
        else btnClassificationToggle.setIcon(icnCollapsedIcon);
    }//GEN-LAST:event_btnClassificationToggleActionPerformed

    private void btnMACLToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMACLToggleActionPerformed
        // Toggle visibility and set icons
        pnlMACLFilter.setVisible(!pnlMACLFilter.isVisible());
        if (pnlMACLFilter.isVisible()) btnMACLToggle.setIcon(icnExpandedIcon);
        else btnMACLToggle.setIcon(icnCollapsedIcon);
    }//GEN-LAST:event_btnMACLToggleActionPerformed

    private void btnRatingToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRatingToggleActionPerformed
        // Toggle visibility and set icons
        pnlRatingFilter.setVisible(!pnlRatingFilter.isVisible());
        if (pnlRatingFilter.isVisible()) btnRatingToggle.setIcon(icnExpandedIcon);
        else btnRatingToggle.setIcon(icnCollapsedIcon);
    }//GEN-LAST:event_btnRatingToggleActionPerformed

    private void btnStatusToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStatusToggleActionPerformed
        // Toggle visibility and set icons
        pnlStatusFilter.setVisible(!pnlStatusFilter.isVisible());
        if (pnlStatusFilter.isVisible()) btnStatusToggle.setIcon(icnExpandedIcon);
        else btnStatusToggle.setIcon(icnCollapsedIcon);
    }//GEN-LAST:event_btnStatusToggleActionPerformed

    private void btnYearToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnYearToggleActionPerformed
        // Toggle visibility and set icons
        pnlYearFilter.setVisible(!pnlYearFilter.isVisible());
        if (pnlYearFilter.isVisible()) btnYearToggle.setIcon(icnExpandedIcon);
        else btnYearToggle.setIcon(icnCollapsedIcon);
    }//GEN-LAST:event_btnYearToggleActionPerformed

    private void rslMACLSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rslMACLSliderStateChanged
        // Set text boxes and filter states to the values of the range slider
        txtSetMinMACL.setText(Integer.toString(rslMACLSlider.getValue()));
        txtSetMaxMACL.setText(Integer.toString(rslMACLSlider.getSecondValue()));
        smaFilterStates[1][0] = Integer.toString(rslMACLSlider.getValue());
        smaFilterStates[1][1] = Integer.toString(rslMACLSlider.getSecondValue());
        mthApplyFilters();
    }//GEN-LAST:event_rslMACLSliderStateChanged

    private void txtSetMinMACLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSetMinMACLActionPerformed
        // Set the range slider's value and filter states to the text box value
        rslMACLSlider.setValue(Integer.parseInt(txtSetMinMACL.getText()));
        smaFilterStates[1][0] = txtSetMinMACL.getText();
        mthApplyFilters();
    }//GEN-LAST:event_txtSetMinMACLActionPerformed

    private void txtSetMaxMACLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSetMaxMACLActionPerformed
        // Set the range slider's value and filter states to the text box value
        rslMACLSlider.setSecondValue(Integer.parseInt(txtSetMaxMACL.getText()));
        smaFilterStates[1][1] = txtSetMaxMACL.getText();
        mthApplyFilters();
    }//GEN-LAST:event_txtSetMaxMACLActionPerformed

    private void rslYearSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rslYearSliderStateChanged
        // Set text boxes and filter states to the values of the range slider
        txtSetMinYear.setText(Integer.toString(rslYearSlider.getValue()));
        txtSetMaxYear.setText(Integer.toString(rslYearSlider.getSecondValue()));
        smaFilterStates[4][0] = Integer.toString(rslMACLSlider.getValue());
        smaFilterStates[4][1] = Integer.toString(rslMACLSlider.getSecondValue());
        mthApplyFilters();
    }//GEN-LAST:event_rslYearSliderStateChanged

    private void txtSetMinYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSetMinYearActionPerformed
        // Set the range slider's value and filter states to the text box value
        rslYearSlider.setValue(Integer.parseInt(txtSetMinYear.getText()));
        smaFilterStates[4][0] = txtSetMinYear.getText();
        mthApplyFilters();
    }//GEN-LAST:event_txtSetMinYearActionPerformed

    private void txtSetMaxYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSetMaxYearActionPerformed
        // Set the range slider's value and filter states to the text box value
        rslYearSlider.setSecondValue(Integer.parseInt(txtSetMaxYear.getText()));
        smaFilterStates[4][1] = txtSetMaxYear.getText();
        mthApplyFilters();
    }//GEN-LAST:event_txtSetMaxYearActionPerformed
    //</editor-fold>
    
    private void mniAddNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniAddNewActionPerformed
        // Create new game data window and set its type to adding a new entry
        GameDataWindow gdwAddGame = new GameDataWindow();
        gdwAddGame.mthSetWindowType("add");
        gdwAddGame.setVisible(true);
    }//GEN-LAST:event_mniAddNewActionPerformed

    private void mniUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniUpdateActionPerformed
        try {
            // Create new game data window and set its type to edit the selected entry
            GameDataWindow gdwUpdateGame = new GameDataWindow();
            gdwUpdateGame.mthSetWindowType("edit");
            
            // Get the selected entry and its associated data
            String strCurrentPlatformTitle = tbpGameEntries.getTitleAt(tbpGameEntries.getSelectedIndex());
            Map mapCurrentPlatformEntries = mapLoadedData.get(strCurrentPlatformTitle);
            String[] sarCurrentGameData = (String[]) mapCurrentPlatformEntries.get(strSelectedGame);
            gdwUpdateGame.mthLoadCurrentGameData(sarCurrentGameData);
            
            gdwUpdateGame.setVisible(true);
        } catch (NullPointerException exc) {
            // Handle no selected game
            System.err.println(new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date()) + " " + exc);
            System.err.println(new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date()) + " " + 
                    "Most likely no game selected: strSelectedGame = " + strSelectedGame);
        }
    }//GEN-LAST:event_mniUpdateActionPerformed

    /**
     * Open file browser window for user to load the encrypted database file, which will be decrypted into an XML file 
     *  and interpreted to load all the game entries into the database storage variables
     * The interface is then updated and several buttons are enabled while the loading button is disabled
     */
    private void mniLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniLoadActionPerformed
        // Create file browser that only allows '.encrypted' files to be loaded
        JFileChooser jfcFileBrowser = new JFileChooser(System.getProperty("user.dir") + "\\src\\main\\resources\\");
        jfcFileBrowser.setSelectedFile(new File("database.encrypted"));
        jfcFileBrowser.addChoosableFileFilter(new FileNameExtensionFilter("Encrypted Files", "encrypted"));
        jfcFileBrowser.setAcceptAllFileFilterUsed(false);
        int intResponse =  jfcFileBrowser.showOpenDialog(null);
        
        // Set the database path if a file is selected
        if (intResponse == JFileChooser.APPROVE_OPTION) pthDatabaseFilePath = 
                Paths.get(jfcFileBrowser.getSelectedFile().getAbsolutePath());
        else return;
        
        //<editor-fold defaultstate="collapsed" desc="XML Loading">
        try {
            
            // Create the temp file to store the decrypted database as an XML file
            File filTempFile = new File(pthDatabaseFilePath.toString().replace(".encrypted", ".xml"));
            filTempFile.createNewFile();
            pthTempFile = filTempFile.toPath();
            
            // Decrypt the database and write it to the temp file
            CryptoUtils.mthDecryptFile(barEncryptionKey, pthDatabaseFilePath.toFile(), pthTempFile.toFile());
            
            
            // Load the XML file and get all the game entries
            DocumentBuilder dcbBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
            docXMLFile = dcbBuilder.parse(new File(pthTempFile.toString()));
            docXMLFile.getDocumentElement().normalize();
            Element elmRoot = docXMLFile.getDocumentElement();
            NodeList ndlEntryNodes = elmRoot.getChildNodes();
            
            /**
             * Outstanding error affects the following code
             * Error effectively doubles file length, resulting in the need to divide the file length by two and 
             *  use of the variable 'intIncrementNoSkip'
             */
            
            // Create a new array based on how many entries there are
            smaGameData = new String[ndlEntryNodes.getLength()/2][10];
            
            int intIncrementNoSkip = 0;
            int intIndexAfterAttr = 2;
            
            // Loop through the database and add each game to the data array
            for (int i = 0; i < smaGameData[0].length; i++) {
                Node nodCurrent = ndlEntryNodes.item(i);
                
                // Only process nodes that contain actual data
                if (nodCurrent != null && nodCurrent.getNodeType() == Node.ELEMENT_NODE) {
                    NamedNodeMap nnmAttrList = nodCurrent.getAttributes();
                    
                    // Add the node attributes to the data array
                    for (int j = 0; j < nnmAttrList.getLength(); j++) {
                        smaGameData[intIncrementNoSkip][j] = nnmAttrList.item(j).getNodeValue();
                    }
                
                    // Loop through children nodes and put the data into the data array
                    NodeList ndlDataList = nodCurrent.getChildNodes();
                    Node nodCurrentChild;

                    for (int j = 0; j < ndlDataList.getLength() - 1; j++) {
                        nodCurrentChild = ndlDataList.item(j);
                        if (nodCurrentChild.getNodeType() == Node.ELEMENT_NODE) {
                            smaGameData[intIncrementNoSkip][intIndexAfterAttr] = nodCurrentChild.getTextContent();
                            intIndexAfterAttr++;
                        }
                    }
                    // Update the index variables
                    intIndexAfterAttr = 2;
                    intIncrementNoSkip++;
                }
            }
            
            // Get and set the platform list variables from the database
            sarPlatformList = elmRoot.getAttributes().item(0).getTextContent().split(", ");
            intPlatformCount = sarPlatformList.length;
            
            
            // Delete the temp file to maintain security
            filTempFile.delete();
            
        } catch (ParserConfigurationException | SAXException | IOException | CryptoException exc) {
            // Log any errors
            System.err.println(new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date()) + " " + exc);
        }
        //</editor-fold>
        
        mthUpdateInterface();
        
        // Prevent consecutive loading of multiple files
        mniLoad.setEnabled(false);
        
        // Allow data manipulation actions
        mniAddNew.setEnabled(true);
        mniUpdate.setEnabled(true);
        mniSave.setEnabled(true);
        mniRemove.setEnabled(true);
    }//GEN-LAST:event_mniLoadActionPerformed

    private void mniQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniQuitActionPerformed
        // Warn of any 'unsaved' actions and exit when the quit button is pressed
        if (blnIsSaved == false) {
            int intConfirmExit = (int) JOptionPane.showConfirmDialog(null, 
                    "Unsaved data!\nDo you wish to proceed?", "Unsaved Data", JOptionPane.YES_NO_OPTION, 
                    JOptionPane.ERROR_MESSAGE);
            if (intConfirmExit == 0) System.exit(0);
        } else System.exit(0);
    }//GEN-LAST:event_mniQuitActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // Warn of any 'unsaved' actions and exit when the window is closed from the title bar
        if (blnIsSaved == false) {
            int intConfirmExit = (int) JOptionPane.showConfirmDialog(null, 
                    "Unsaved data!\nDo you wish to proceed?", "Unsaved Data", JOptionPane.YES_NO_OPTION, 
                    JOptionPane.ERROR_MESSAGE);
            if (intConfirmExit == 0) System.exit(0);
        } else System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    /**
     * Since the database is edited when a game is updated or added there should never be a case where the database is 
     *  not identical to the stored variables, thus, the save button has no 'saving' functionality
     */
    private void mniSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniSaveActionPerformed
        JOptionPane.showMessageDialog(null, "Database Saved Successfully");
        if (blnIsSaved != true) blnIsSaved = true;
    }//GEN-LAST:event_mniSaveActionPerformed

    /**
     * Set the filter state array based on what checkbox is selected for each category and then apply the filters
     */
    //<editor-fold defaultstate="collapsed" desc="Set Filters">
    private void cbxRatedGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxRatedGActionPerformed
        smaFilterStates[0][0] = "G";
        mthApplyFilters();
    }//GEN-LAST:event_cbxRatedGActionPerformed

    private void cbxRatedPGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxRatedPGActionPerformed
        smaFilterStates[0][0] = "PG";
        mthApplyFilters();
    }//GEN-LAST:event_cbxRatedPGActionPerformed

    private void cbxRatedMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxRatedMActionPerformed
        smaFilterStates[0][0] = "M";
        mthApplyFilters();
    }//GEN-LAST:event_cbxRatedMActionPerformed

    private void cbxRatedMA15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxRatedMA15ActionPerformed
        smaFilterStates[0][0] = "MA15+";
        mthApplyFilters();
    }//GEN-LAST:event_cbxRatedMA15ActionPerformed

    private void cbxRatedR18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxRatedR18ActionPerformed
        smaFilterStates[0][0] = "R18+";
        mthApplyFilters();
    }//GEN-LAST:event_cbxRatedR18ActionPerformed

    private void cbx0StarsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbx0StarsActionPerformed
        smaFilterStates[2][0] = "0";
        mthApplyFilters();
    }//GEN-LAST:event_cbx0StarsActionPerformed

    private void cbx1StarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbx1StarActionPerformed
        smaFilterStates[2][0] = "1";
        mthApplyFilters();
    }//GEN-LAST:event_cbx1StarActionPerformed

    private void cbx2StarsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbx2StarsActionPerformed
        smaFilterStates[2][0] = "2";
        mthApplyFilters();
    }//GEN-LAST:event_cbx2StarsActionPerformed

    private void cbx3StarsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbx3StarsActionPerformed
        smaFilterStates[2][0] = "3";
        mthApplyFilters();
    }//GEN-LAST:event_cbx3StarsActionPerformed

    private void cbx4StarsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbx4StarsActionPerformed
        smaFilterStates[2][0] = "4";
        mthApplyFilters();
    }//GEN-LAST:event_cbx4StarsActionPerformed

    private void cbx5StarsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbx5StarsActionPerformed
        smaFilterStates[2][0] = "5";
        mthApplyFilters();
    }//GEN-LAST:event_cbx5StarsActionPerformed

    private void cbxNotPlayingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxNotPlayingActionPerformed
        smaFilterStates[3][0] = "NP";
        mthApplyFilters();
    }//GEN-LAST:event_cbxNotPlayingActionPerformed

    private void cbxInProgressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxInProgressActionPerformed
        smaFilterStates[3][0] = "IP";
        mthApplyFilters();
    }//GEN-LAST:event_cbxInProgressActionPerformed

    private void cbxFinishedGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxFinishedGameActionPerformed
        smaFilterStates[3][0] = "FG";
        mthApplyFilters();
    }//GEN-LAST:event_cbxFinishedGameActionPerformed

    private void cbxFinishedStoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxFinishedStoryActionPerformed
        smaFilterStates[3][0] = "FS";
        mthApplyFilters();
    }//GEN-LAST:event_cbxFinishedStoryActionPerformed

    private void cbxAbandonedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxAbandonedActionPerformed
        smaFilterStates[3][0] = "AB";
        mthApplyFilters();
    }//GEN-LAST:event_cbxAbandonedActionPerformed
    //</editor-fold>
    
    /**
     * Reset the filter state array and the filters interface elements, only if data is loaded
     */
    private void btnClearFiltersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearFiltersActionPerformed
        if (smaGameData == null) {
            JOptionPane.showMessageDialog(null, "Please load data first", "No data", 
                    JOptionPane.WARNING_MESSAGE);
        } else {
            // Reset the filter states array
            smaFilterStates[0][0] = "N/A";
            smaFilterStates[1][0] = "0";
            smaFilterStates[1][1] = "999";
            smaFilterStates[2][0] = "N/A";
            smaFilterStates[3][0] = "N/A";
            smaFilterStates[4][0] = "1956";
            smaFilterStates[4][1] = String.valueOf(mthGetCurrentYear());
            
            // Reset the length slider and text boxes
            rslMACLSlider.setValue(Integer.parseInt(smaFilterStates[1][0]));
            rslMACLSlider.setSecondValue(Integer.parseInt(smaFilterStates[1][1]));
            txtSetMinMACL.setText(smaFilterStates[1][0]);
            txtSetMaxMACL.setText(smaFilterStates[1][1]);
            
            // Reset the release year slider and text boxes
            rslYearSlider.setValue(Integer.parseInt(smaFilterStates[4][0]));
            rslYearSlider.setSecondValue(Integer.parseInt(smaFilterStates[4][1]));
            txtSetMinYear.setText(smaFilterStates[4][0]);
            txtSetMaxYear.setText(smaFilterStates[4][1]);
            
            mthApplyFilters();
        }
    }//GEN-LAST:event_btnClearFiltersActionPerformed

    /**
     * Based on the selected advanced search options, conduct a search of every game entry for any matching games
     * Only the first matching game will be selected due to the limitations of the program
     */
    private void btnSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchButtonActionPerformed
        if (smaGameData == null) {
            JOptionPane.showMessageDialog(null, "Please load data first", "No data", 
                    JOptionPane.WARNING_MESSAGE);
        } else {
            for (String[] smaCurrentGameData : smaGameData) {
                // Fuzzy search using the '.contains()' method
                if (!cbxExactSearch.isSelected()) {
                    // Search game titles
                    if (rtnTitleCategory.isSelected()) {
                        // If a game matches, get the matching game entry in the interface, select it and end the operations
                        if ((smaCurrentGameData[3]).contains(txtSearchQuery.getText())) {
                            Map mapCurrentTab = mapPlatforms.get(tbpGameEntries.getTitleAt(
                                    tbpGameEntries.getSelectedIndex()));
                            GameEntry gmeMatchingGame = (GameEntry) mapCurrentTab.get(smaCurrentGameData[0]);
                            gmeMatchingGame.setSelected(true);
                            return;
                        }
                    }
                    // Search game notes
                    else if (rtnNotesCategory.isSelected()) {
                        // If a game matches, get the matching game entry in the interface, select it and end the operations
                        if ((smaCurrentGameData[9]).contains(txtSearchQuery.getText())) {
                            Map mapCurrentTab = mapPlatforms.get(tbpGameEntries.getTitleAt(
                                    tbpGameEntries.getSelectedIndex()));
                            GameEntry gmeMatchingGame = (GameEntry) mapCurrentTab.get(smaCurrentGameData[0]);
                            gmeMatchingGame.setSelected(true);
                            return;
                        }
                    }
                }
                // Exact search using the '.equals()' method
                else {
                    // Search game titles
                    if (rtnTitleCategory.isSelected()) {
                        // If a game matches, get the matching game entry in the interface, select it and end the operations
                        if ((smaCurrentGameData[3]).equals(txtSearchQuery.getText())) {
                            Map mapCurrentTab = mapPlatforms.get(tbpGameEntries.getTitleAt(
                                    tbpGameEntries.getSelectedIndex()));
                            GameEntry gmeMatchingGame = (GameEntry) mapCurrentTab.get(smaCurrentGameData[0]);
                            gmeMatchingGame.setSelected(true);
                            return;
                        }
                    } 
                    // Search game notes
                    else if (rtnNotesCategory.isSelected()) {
                        // If a game matches, get the matching game entry in the interface, select it and end the operations
                        if ((smaCurrentGameData[9]).equals(txtSearchQuery.getText())) {
                            Map mapCurrentTab = mapPlatforms.get(tbpGameEntries.getTitleAt(
                                    tbpGameEntries.getSelectedIndex()));
                            GameEntry gmeMmatchingGame = (GameEntry) mapCurrentTab.get(smaCurrentGameData[0]);
                            gmeMmatchingGame.setSelected(true);
                            return;
                        }
                    }
                }
            }
            // Notify the user is no game entry matches the search query
            JOptionPane.showMessageDialog(null, "No matching game", "Search warning", 
                    JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnSearchButtonActionPerformed

    /**
     * Get the selected game entry and remove it from the stored variables and the database file, decrypting and 
     *  re-encrypting the file before and after the editing actions, respectively
     * The interface is updated, actions are flagged as 'unsaved' and the user is notified of the success or failure 
     *  of the action
     */
    private void mniRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniRemoveActionPerformed
        // Get the selected game and its associated data
        String strCurrentPlatformTitle = tbpGameEntries.getTitleAt(tbpGameEntries.getSelectedIndex());
        Map mapCurrentPlatformEntries = mapLoadedData.get(strCurrentPlatformTitle);
        String[] sarCurrentGameData = (String[]) mapCurrentPlatformEntries.get(strSelectedGame);
        
        // Confirm with the user if they wish to delete the entry
        int intConfirmExit = (int) JOptionPane.showConfirmDialog(null, 
                "Deleting entry!\nDo you wish to proceed?", "Remove Entry", JOptionPane.YES_NO_OPTION, 
                JOptionPane.ERROR_MESSAGE);
        if (intConfirmExit != 0) return;
        
        XPathFactory xpfXPathFactory = XPathFactory.newInstance();
        XPath xpaXPath = xpfXPathFactory.newXPath();
        
        try {
            // Get the node of the loaded XML file that matches the ID of the selected game
            XPathExpression xpeExpression = xpaXPath.compile("/gameList/game[@id = '" + sarCurrentGameData[0] + "']");
            Node nodCurrentNode = (Node) xpeExpression.evaluate(MainWindow.docXMLFile, XPathConstants.NODE);
            
            // Delete the node from the loaded XML
            nodCurrentNode.getParentNode().removeChild(nodCurrentNode);
            
            // Update the platform list variables and the loaded XML attribute
            String strPlatformList = Arrays.toString(MainWindow.sarPlatformList);
            strPlatformList = strPlatformList.replace("[", "");
            strPlatformList = strPlatformList.replace("]", "");
            strPlatformList = strPlatformList.replace(", " + sarCurrentGameData[1], "");
            MainWindow.docXMLFile.getDocumentElement().setAttribute("platformList", strPlatformList);
            MainWindow.sarPlatformList = new String[MainWindow.sarPlatformList.length];
            MainWindow.sarPlatformList = strPlatformList.split(", ");
            MainWindow.intPlatformCount--;
            
            
            // Create the temp file to store the decrypted database as an XML file
            File filTempFile = new File(MainWindow.pthDatabaseFilePath.toString().replace(".encrypted", 
                    ".xml"));
            filTempFile.createNewFile();
            MainWindow.pthTempFile = filTempFile.toPath();
            
            // Decrypt the database and write it to the temp file
            CryptoUtils.mthDecryptFile(MainWindow.barEncryptionKey, MainWindow.pthDatabaseFilePath.toFile(), 
                    MainWindow.pthTempFile.toFile());
            
            
            // Create a XML transformer and write the loaded XML file to the temp file
            TransformerFactory tffTransformerFactory = TransformerFactory.newInstance();
            Transformer tsfTransformer = tffTransformerFactory.newTransformer();
            tsfTransformer.setOutputProperty(OutputKeys.INDENT, "yes");
            DOMSource dmsSource = new DOMSource(MainWindow.docXMLFile);
            FileOutputStream fosOutput = new FileOutputStream(MainWindow.pthTempFile.toString());
            StreamResult smrResult = new StreamResult(fosOutput);
            tsfTransformer.transform(dmsSource, smrResult);
            
            
            // Re-encrypt the database and delete the temp file
            CryptoUtils.mthEncryptFile(MainWindow.barEncryptionKey, MainWindow.pthTempFile.toFile(), 
                    MainWindow.pthDatabaseFilePath.toFile());
            fosOutput.close();
            filTempFile.delete();
            
        } catch (TransformerException | IOException | XPathExpressionException | CryptoException exc) {
            // Log any errors and notify the user of failure
            System.err.println(new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date()) + " " + 
                    "Database editing didn't work (transformer or file error): " + exc);
            JOptionPane.showMessageDialog(this, "Game Failed To Be Removed");
        }
        
        // Update the data array and reduce its length
        String[][] smaUpdatedData = new String[MainWindow.smaGameData.length - 1][10];
        int intNewIndex = 0;
        for (String[] smaData : MainWindow.smaGameData) {
            if (!smaData[0].equals(sarCurrentGameData[0])) {
                smaUpdatedData[intNewIndex] = smaData;
                intNewIndex++;
            } 
            else break;
        }
        MainWindow.smaGameData = new String[smaUpdatedData.length][10];
        System.arraycopy(smaUpdatedData, 0, MainWindow.smaGameData, 0, smaUpdatedData.length);
        
        // Update the interface, flag 'unsaved' actions and notify the user of success
        MainWindow.mthUpdateInterface();
        MainWindow.blnIsSaved = false;
        JOptionPane.showMessageDialog(this, "Game Removed Successfully");
    }//GEN-LAST:event_mniRemoveActionPerformed

    private void mniAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniAboutActionPerformed
        // Open a new 'about' window
        new AboutWindow().setVisible(true);
    }//GEN-LAST:event_mniAboutActionPerformed
    
    /**
     * @param args the command line arguments
     * @throws java.io.FileNotFoundException
     */
    public static void main(String args[]) throws FileNotFoundException {
        // Set the java 'err' output stream to log to the 'error.log' file
        System.setErr(new PrintStream(new FileOutputStream(System.getProperty("user.dir") +
                "\\src\\main\\resources\\" + "/errors.log")));
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    //<editor-fold defaultstate="collapsed" desc="Variables declaration">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgpClassification;
    private static javax.swing.ButtonGroup bgpGameSelection;
    private javax.swing.ButtonGroup bgpRating;
    private javax.swing.ButtonGroup bgpSearchCategories;
    private javax.swing.ButtonGroup bgpStatus;
    private javax.swing.JButton btnAdvancedSearchToggle;
    private javax.swing.JButton btnClassificationToggle;
    private javax.swing.JButton btnClearFilters;
    private javax.swing.JButton btnMACLToggle;
    private javax.swing.JButton btnRatingToggle;
    private javax.swing.JButton btnSearchButton;
    private javax.swing.JButton btnSearchMenuToggle;
    private javax.swing.JButton btnStatusToggle;
    private javax.swing.JButton btnYearToggle;
    private javax.swing.JCheckBox cbx0Stars;
    private javax.swing.JCheckBox cbx1Star;
    private javax.swing.JCheckBox cbx2Stars;
    private javax.swing.JCheckBox cbx3Stars;
    private javax.swing.JCheckBox cbx4Stars;
    private javax.swing.JCheckBox cbx5Stars;
    private javax.swing.JCheckBox cbxAbandoned;
    private javax.swing.JCheckBox cbxExactSearch;
    private javax.swing.JCheckBox cbxFinishedGame;
    private javax.swing.JCheckBox cbxFinishedStory;
    private javax.swing.JCheckBox cbxInProgress;
    private javax.swing.JCheckBox cbxNotPlaying;
    private javax.swing.JCheckBox cbxRatedG;
    private javax.swing.JCheckBox cbxRatedM;
    private javax.swing.JCheckBox cbxRatedMA15;
    private javax.swing.JCheckBox cbxRatedPG;
    private javax.swing.JCheckBox cbxRatedR18;
    private javax.swing.JLabel lblAbsoluteEarliestYear;
    private javax.swing.JLabel lblAbsoluteLatestYear;
    private javax.swing.JLabel lblAbsoluteMaxMACL;
    private javax.swing.JLabel lblAbsoluteMinMACL;
    private javax.swing.JLabel lblFilters;
    private javax.swing.JLabel lblSearchCategory;
    private javax.swing.JLabel lblSetMaxMACL;
    private javax.swing.JLabel lblSetMaxYear;
    private javax.swing.JLabel lblSetMinMACL;
    private javax.swing.JLabel lblSetMinYear;
    private javax.swing.JMenuBar mnbTitleBar;
    private javax.swing.JMenuItem mniAbout;
    private javax.swing.JMenuItem mniAddNew;
    private javax.swing.JMenuItem mniLoad;
    private javax.swing.JMenuItem mniQuit;
    private javax.swing.JMenuItem mniRemove;
    private javax.swing.JMenuItem mniSave;
    private javax.swing.JMenuItem mniUpdate;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenu mnuGame;
    private javax.swing.JMenu mnuHelp;
    private javax.swing.JPanel pnlAdvancedSearch;
    private javax.swing.JPanel pnlClassificationFilter;
    private javax.swing.JPanel pnlMACLFilter;
    private javax.swing.JPanel pnlRatingFilter;
    private javax.swing.JPanel pnlSearchMenu;
    private javax.swing.JPanel pnlSidebarInner;
    private javax.swing.JPanel pnlStatusFilter;
    private javax.swing.JPanel pnlYearFilter;
    private JRangeSlider rslMACLSlider;
    private JRangeSlider rslYearSlider;
    private javax.swing.JRadioButton rtnNotesCategory;
    private javax.swing.JRadioButton rtnTitleCategory;
    private javax.swing.JScrollPane srpSidebarScroll;
    private static javax.swing.JTabbedPane tbpGameEntries;
    private javax.swing.JTextField txtSearchQuery;
    private javax.swing.JTextField txtSetMaxMACL;
    private javax.swing.JTextField txtSetMaxYear;
    private javax.swing.JTextField txtSetMinMACL;
    private javax.swing.JTextField txtSetMinYear;
    // End of variables declaration//GEN-END:variables
    //</editor-fold>
}
