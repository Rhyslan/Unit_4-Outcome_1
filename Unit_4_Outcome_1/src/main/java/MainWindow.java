
import java.awt.Component;
import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JMenu;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 *
 * @author dylan
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgpSearchCategories = new javax.swing.ButtonGroup();
        bgpGameSelection = new javax.swing.ButtonGroup();
        srpSidebarScroll = new javax.swing.JScrollPane();
        srpSidebarScroll.getVerticalScrollBar().setUnitIncrement(20);
        pnlSidebarInner = new javax.swing.JPanel();
        btnSearchMenuToggle = new javax.swing.JButton();
        pnlSearchMenu = new javax.swing.JPanel();
        pnlSearchMenu.setVisible(false);
        txtSearchQuery = new javax.swing.JTextField();
        btnSearchButton = new javax.swing.JButton();
        btnAdvancedSearchToggle = new javax.swing.JButton();
        btnAdvancedSearchToggle.setVisible(false);
        pnlAdvancedSearch = new javax.swing.JPanel();
        pnlAdvancedSearch.setVisible(false);
        strAdvancedPrevious = "AWC";
        lblSearchCategory = new javax.swing.JLabel();
        rtnTitleCategory = new javax.swing.JRadioButton();
        rtnNotesCategory = new javax.swing.JRadioButton();
        cbxExactSearch = new javax.swing.JCheckBox();
        lblFilters = new javax.swing.JLabel();
        btnClassificationToggle = new javax.swing.JButton();
        pnlClassificationFilter = new javax.swing.JPanel();
        pnlClassificationFilter.setVisible(false);
        cbxRatedG = new javax.swing.JCheckBox();
        cbxRatedPG = new javax.swing.JCheckBox();
        cbxRatedM = new javax.swing.JCheckBox();
        cbxRatedMA15 = new javax.swing.JCheckBox();
        cbxRatedR18 = new javax.swing.JCheckBox();
        btnMACLToggle = new javax.swing.JButton();
        pnlMACLFilter = new javax.swing.JPanel();
        pnlMACLFilter.setVisible(false);
        lblAbsoluteMinMACL = new javax.swing.JLabel();
        lblAbsoluteMaxMACL = new javax.swing.JLabel();
        lblSetMinMACL = new javax.swing.JLabel();
        txtSetMinMACL = new javax.swing.JTextField();
        txtSetMaxMACL = new javax.swing.JTextField();
        lblSetMaxMACL = new javax.swing.JLabel();
        rslMACLSlider = new JRangeSlider();
        btnRatingToggle = new javax.swing.JButton();
        pnlRatingFilter = new javax.swing.JPanel();
        pnlRatingFilter.setVisible(false);
        cbx0Stars = new javax.swing.JCheckBox();
        cbx1Star = new javax.swing.JCheckBox();
        cbx2Stars = new javax.swing.JCheckBox();
        cbx3Stars = new javax.swing.JCheckBox();
        cbx4Stars = new javax.swing.JCheckBox();
        cbx5Stars = new javax.swing.JCheckBox();
        btnStatusToggle = new javax.swing.JButton();
        pnlStatusFilter = new javax.swing.JPanel();
        pnlStatusFilter.setVisible(false);
        cbxNotPlaying = new javax.swing.JCheckBox();
        cbxInProgress = new javax.swing.JCheckBox();
        cbxFinishedGame = new javax.swing.JCheckBox();
        cbxFinishedStory = new javax.swing.JCheckBox();
        cbxAbandoned = new javax.swing.JCheckBox();
        btnYearToggle = new javax.swing.JButton();
        pnlYearFilter = new javax.swing.JPanel();
        pnlYearFilter.setVisible(false);
        lblAbsoluteEarliestYear = new javax.swing.JLabel();
        lblAbsoluteLatestYear = new javax.swing.JLabel();
        rslYearSlider = new JRangeSlider();
        txtSetMinYear = new javax.swing.JTextField();
        txtSetMaxYear = new javax.swing.JTextField();
        lblSetMaxYear = new javax.swing.JLabel();
        lblSetMinYear = new javax.swing.JLabel();
        tbpGameEntries = new javax.swing.JTabbedPane();
        mnbTitleBar = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mniLoad = new javax.swing.JMenuItem();
        mniSave = new javax.swing.JMenuItem();
        mniQuit = new javax.swing.JMenuItem();
        mnuGame = new javax.swing.JMenu();
        mniAddNew = new javax.swing.JMenuItem();
        mniUpdate = new javax.swing.JMenuItem();
        mniRemove = new javax.swing.JMenuItem();
        mnuHelp = new javax.swing.JMenu();
        mniOnlineDocs = new javax.swing.JMenuItem();
        mniManual = new javax.swing.JMenuItem();
        mniAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Level-Up Library - Main Window");
        setMinimumSize(new java.awt.Dimension(1024, 600));
        setName("MainWindow"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1024, 600));
        setSize(new java.awt.Dimension(1024, 600));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        srpSidebarScroll.setBorder(null);
        srpSidebarScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        srpSidebarScroll.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        srpSidebarScroll.setEnabled(false);

        pnlSidebarInner.setEnabled(false);
        pnlSidebarInner.setMinimumSize(new java.awt.Dimension(0, 0));
        pnlSidebarInner.setPreferredSize(new java.awt.Dimension(230, 1016));
        org.jdesktop.swingx.VerticalLayout verticalLayout1 = new org.jdesktop.swingx.VerticalLayout();
        verticalLayout1.setGap(5);
        pnlSidebarInner.setLayout(verticalLayout1);

        btnSearchMenuToggle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Collapsed.png"))); // NOI18N
        btnSearchMenuToggle.setText("Search");
        btnSearchMenuToggle.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        btnSearchMenuToggle.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        btnSearchMenuToggle.setIconTextGap(70);
        btnSearchMenuToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchMenuToggleActionPerformed(evt);
            }
        });
        pnlSidebarInner.add(btnSearchMenuToggle);

        pnlSearchMenu.setPreferredSize(new java.awt.Dimension(230, 40));

        txtSearchQuery.setText("search query");

        btnSearchButton.setText("Search");

        javax.swing.GroupLayout pnlSearchMenuLayout = new javax.swing.GroupLayout(pnlSearchMenu);
        pnlSearchMenu.setLayout(pnlSearchMenuLayout);
        pnlSearchMenuLayout.setHorizontalGroup(
            pnlSearchMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSearchMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtSearchQuery, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSearchButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlSearchMenuLayout.setVerticalGroup(
            pnlSearchMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSearchMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSearchMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearchQuery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchButton))
                .addGap(5, 5, 5))
        );

        pnlSidebarInner.add(pnlSearchMenu);

        btnAdvancedSearchToggle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Collapsed.png"))); // NOI18N
        btnAdvancedSearchToggle.setText("Advanced");
        btnAdvancedSearchToggle.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        btnAdvancedSearchToggle.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        btnAdvancedSearchToggle.setIconTextGap(62);
        btnAdvancedSearchToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdvancedSearchToggleActionPerformed(evt);
            }
        });
        pnlSidebarInner.add(btnAdvancedSearchToggle);

        lblSearchCategory.setText("Category:");

        bgpSearchCategories.add(rtnTitleCategory);
        rtnTitleCategory.setSelected(true);
        rtnTitleCategory.setText("Title");

        bgpSearchCategories.add(rtnNotesCategory);
        rtnNotesCategory.setText("Notes");

        cbxExactSearch.setText("Exact Match:");
        cbxExactSearch.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        cbxExactSearch.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        cbxExactSearch.setIconTextGap(10);

        javax.swing.GroupLayout pnlAdvancedSearchLayout = new javax.swing.GroupLayout(pnlAdvancedSearch);
        pnlAdvancedSearch.setLayout(pnlAdvancedSearchLayout);
        pnlAdvancedSearchLayout.setHorizontalGroup(
            pnlAdvancedSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAdvancedSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAdvancedSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSearchCategory)
                    .addComponent(rtnTitleCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rtnNotesCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxExactSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlAdvancedSearchLayout.setVerticalGroup(
            pnlAdvancedSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAdvancedSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblSearchCategory)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rtnTitleCategory)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rtnNotesCategory)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cbxExactSearch)
                .addContainerGap())
        );

        pnlSidebarInner.add(pnlAdvancedSearch);

        lblFilters.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFilters.setText("Filters");
        lblFilters.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        lblFilters.setMinimumSize(new java.awt.Dimension(31, 20));
        lblFilters.setPreferredSize(new java.awt.Dimension(31, 20));
        pnlSidebarInner.add(lblFilters);

        btnClassificationToggle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Collapsed.png"))); // NOI18N
        btnClassificationToggle.setText("Classification");
        btnClassificationToggle.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        btnClassificationToggle.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        btnClassificationToggle.setIconTextGap(56);
        btnClassificationToggle.setInheritsPopupMenu(true);
        btnClassificationToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClassificationToggleActionPerformed(evt);
            }
        });
        pnlSidebarInner.add(btnClassificationToggle);

        pnlClassificationFilter.setPreferredSize(new java.awt.Dimension(230, 85));

        cbxRatedG.setText("G");
        cbxRatedG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxRatedGActionPerformed(evt);
            }
        });

        cbxRatedPG.setText("PG");
        cbxRatedPG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxRatedPGActionPerformed(evt);
            }
        });

        cbxRatedM.setText("M");
        cbxRatedM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxRatedMActionPerformed(evt);
            }
        });

        cbxRatedMA15.setText("MA15+");
        cbxRatedMA15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxRatedMA15ActionPerformed(evt);
            }
        });

        cbxRatedR18.setText("R18+");
        cbxRatedR18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxRatedR18ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlClassificationFilterLayout = new javax.swing.GroupLayout(pnlClassificationFilter);
        pnlClassificationFilter.setLayout(pnlClassificationFilterLayout);
        pnlClassificationFilterLayout.setHorizontalGroup(
            pnlClassificationFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlClassificationFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlClassificationFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlClassificationFilterLayout.createSequentialGroup()
                        .addComponent(cbxRatedM, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cbxRatedMA15, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cbxRatedR18, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlClassificationFilterLayout.createSequentialGroup()
                        .addComponent(cbxRatedG, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cbxRatedPG, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlClassificationFilterLayout.setVerticalGroup(
            pnlClassificationFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlClassificationFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlClassificationFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxRatedG)
                    .addComponent(cbxRatedPG))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlClassificationFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxRatedM)
                    .addComponent(cbxRatedMA15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbxRatedR18)
                .addGap(5, 5, 5))
        );

        pnlSidebarInner.add(pnlClassificationFilter);

        btnMACLToggle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Collapsed.png"))); // NOI18N
        btnMACLToggle.setText("MACL");
        btnMACLToggle.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        btnMACLToggle.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        btnMACLToggle.setIconTextGap(78);
        btnMACLToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMACLToggleActionPerformed(evt);
            }
        });
        pnlSidebarInner.add(btnMACLToggle);

        lblAbsoluteMinMACL.setText("0");

        lblAbsoluteMaxMACL.setText("999");

        lblSetMinMACL.setText("Min:");

        txtSetMinMACL.setText("0");
        txtSetMinMACL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSetMinMACLActionPerformed(evt);
            }
        });

        txtSetMaxMACL.setText("999");
        txtSetMaxMACL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSetMaxMACLActionPerformed(evt);
            }
        });

        lblSetMaxMACL.setText("Max:");

        rslMACLSlider.setMaximum(999);
        rslMACLSlider.setSecondValue(999);
        rslMACLSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rslMACLSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout rslMACLSliderLayout = new javax.swing.GroupLayout(rslMACLSlider);
        rslMACLSlider.setLayout(rslMACLSliderLayout);
        rslMACLSliderLayout.setHorizontalGroup(
            rslMACLSliderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        rslMACLSliderLayout.setVerticalGroup(
            rslMACLSliderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout pnlMACLFilterLayout = new javax.swing.GroupLayout(pnlMACLFilter);
        pnlMACLFilter.setLayout(pnlMACLFilterLayout);
        pnlMACLFilterLayout.setHorizontalGroup(
            pnlMACLFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMACLFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMACLFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rslMACLSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMACLFilterLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblAbsoluteMaxMACL, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlMACLFilterLayout.createSequentialGroup()
                        .addGroup(pnlMACLFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlMACLFilterLayout.createSequentialGroup()
                                .addGroup(pnlMACLFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblSetMinMACL, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblSetMaxMACL, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(pnlMACLFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtSetMinMACL, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtSetMaxMACL, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(pnlMACLFilterLayout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(lblAbsoluteMinMACL, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlMACLFilterLayout.setVerticalGroup(
            pnlMACLFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMACLFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMACLFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAbsoluteMinMACL)
                    .addComponent(lblAbsoluteMaxMACL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rslMACLSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addGroup(pnlMACLFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSetMinMACL)
                    .addComponent(txtSetMinMACL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMACLFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSetMaxMACL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSetMaxMACL))
                .addContainerGap())
        );

        pnlSidebarInner.add(pnlMACLFilter);

        btnRatingToggle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Collapsed.png"))); // NOI18N
        btnRatingToggle.setText("Rating");
        btnRatingToggle.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        btnRatingToggle.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        btnRatingToggle.setIconTextGap(78);
        btnRatingToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRatingToggleActionPerformed(evt);
            }
        });
        pnlSidebarInner.add(btnRatingToggle);

        pnlRatingFilter.setPreferredSize(new java.awt.Dimension(230, 160));

        cbx0Stars.setText("None");
        cbx0Stars.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbx0StarsActionPerformed(evt);
            }
        });

        cbx1Star.setText("1 Star");
        cbx1Star.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbx1StarActionPerformed(evt);
            }
        });

        cbx2Stars.setText("2 Stars");
        cbx2Stars.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbx2StarsActionPerformed(evt);
            }
        });

        cbx3Stars.setText("3 Stars");
        cbx3Stars.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbx3StarsActionPerformed(evt);
            }
        });

        cbx4Stars.setText("4 Stars");
        cbx4Stars.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbx4StarsActionPerformed(evt);
            }
        });

        cbx5Stars.setText("5 Stars");
        cbx5Stars.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbx5StarsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlRatingFilterLayout = new javax.swing.GroupLayout(pnlRatingFilter);
        pnlRatingFilter.setLayout(pnlRatingFilterLayout);
        pnlRatingFilterLayout.setHorizontalGroup(
            pnlRatingFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRatingFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlRatingFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbx0Stars, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbx1Star, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbx2Stars, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbx3Stars, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbx4Stars, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbx5Stars, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlRatingFilterLayout.setVerticalGroup(
            pnlRatingFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRatingFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbx0Stars)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbx1Star)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbx2Stars)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbx3Stars)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbx4Stars)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbx5Stars)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlSidebarInner.add(pnlRatingFilter);

        btnStatusToggle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Collapsed.png"))); // NOI18N
        btnStatusToggle.setText("Status");
        btnStatusToggle.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        btnStatusToggle.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        btnStatusToggle.setIconTextGap(74);
        btnStatusToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStatusToggleActionPerformed(evt);
            }
        });
        pnlSidebarInner.add(btnStatusToggle);

        cbxNotPlaying.setText("NP");
        cbxNotPlaying.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxNotPlayingActionPerformed(evt);
            }
        });

        cbxInProgress.setText("IP");
        cbxInProgress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxInProgressActionPerformed(evt);
            }
        });

        cbxFinishedGame.setText("FG");
        cbxFinishedGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxFinishedGameActionPerformed(evt);
            }
        });

        cbxFinishedStory.setText("FS");
        cbxFinishedStory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxFinishedStoryActionPerformed(evt);
            }
        });

        cbxAbandoned.setText("AB");
        cbxAbandoned.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxAbandonedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlStatusFilterLayout = new javax.swing.GroupLayout(pnlStatusFilter);
        pnlStatusFilter.setLayout(pnlStatusFilterLayout);
        pnlStatusFilterLayout.setHorizontalGroup(
            pnlStatusFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlStatusFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlStatusFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlStatusFilterLayout.createSequentialGroup()
                        .addComponent(cbxNotPlaying, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cbxInProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlStatusFilterLayout.createSequentialGroup()
                        .addComponent(cbxFinishedGame, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cbxFinishedStory, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cbxAbandoned, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlStatusFilterLayout.setVerticalGroup(
            pnlStatusFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlStatusFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlStatusFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxNotPlaying)
                    .addComponent(cbxInProgress))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlStatusFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxFinishedGame)
                    .addComponent(cbxFinishedStory))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbxAbandoned)
                .addGap(6, 6, 6))
        );

        pnlSidebarInner.add(pnlStatusFilter);

        btnYearToggle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Collapsed.png"))); // NOI18N
        btnYearToggle.setText("Year");
        btnYearToggle.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        btnYearToggle.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        btnYearToggle.setIconTextGap(79);
        btnYearToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnYearToggleActionPerformed(evt);
            }
        });
        pnlSidebarInner.add(btnYearToggle);

        lblAbsoluteEarliestYear.setText("1958");

        lblAbsoluteLatestYear.setText("2023");

        rslYearSlider.setMaximum(2023);
        rslYearSlider.setMinimum(1958);
        rslYearSlider.setSecondValue(2023);
        rslYearSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rslYearSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout rslYearSliderLayout = new javax.swing.GroupLayout(rslYearSlider);
        rslYearSlider.setLayout(rslYearSliderLayout);
        rslYearSliderLayout.setHorizontalGroup(
            rslYearSliderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        rslYearSliderLayout.setVerticalGroup(
            rslYearSliderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        txtSetMinYear.setText("1958");
        txtSetMinYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSetMinYearActionPerformed(evt);
            }
        });

        txtSetMaxYear.setText("2023");
        txtSetMaxYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSetMaxYearActionPerformed(evt);
            }
        });

        lblSetMaxYear.setText("Latest:");

        lblSetMinYear.setText("Earliest:");

        javax.swing.GroupLayout pnlYearFilterLayout = new javax.swing.GroupLayout(pnlYearFilter);
        pnlYearFilter.setLayout(pnlYearFilterLayout);
        pnlYearFilterLayout.setHorizontalGroup(
            pnlYearFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlYearFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlYearFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rslYearSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlYearFilterLayout.createSequentialGroup()
                        .addGroup(pnlYearFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSetMinYear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblSetMaxYear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlYearFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSetMaxYear, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSetMinYear, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(92, 92, 92))
                    .addGroup(pnlYearFilterLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(lblAbsoluteEarliestYear, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblAbsoluteLatestYear, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlYearFilterLayout.setVerticalGroup(
            pnlYearFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlYearFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlYearFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAbsoluteEarliestYear)
                    .addComponent(lblAbsoluteLatestYear))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rslYearSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addGroup(pnlYearFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSetMinYear)
                    .addComponent(txtSetMinYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlYearFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSetMaxYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSetMaxYear))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlSidebarInner.add(pnlYearFilter);

        srpSidebarScroll.setViewportView(pnlSidebarInner);

        tbpGameEntries.setPreferredSize(new java.awt.Dimension(778, 577));

        mnuFile.setText("File");

        mniLoad.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mniLoad.setText("Load");
        mniLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniLoadActionPerformed(evt);
            }
        });
        mnuFile.add(mniLoad);

        mniSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mniSave.setText("Save");
        mniSave.setEnabled(false);
        mniSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniSaveActionPerformed(evt);
            }
        });
        mnuFile.add(mniSave);

        mniQuit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mniQuit.setText("Quit");
        mniQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniQuitActionPerformed(evt);
            }
        });
        mnuFile.add(mniQuit);

        mnbTitleBar.add(mnuFile);

        mnuGame.setText("Game");

        mniAddNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mniAddNew.setText("Add New");
        mniAddNew.setEnabled(false);
        mniAddNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniAddNewActionPerformed(evt);
            }
        });
        mnuGame.add(mniAddNew);

        mniUpdate.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mniUpdate.setText("Update");
        mniUpdate.setEnabled(false);
        mniUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniUpdateActionPerformed(evt);
            }
        });
        mnuGame.add(mniUpdate);

        mniRemove.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        mniRemove.setText("Remove");
        mniRemove.setEnabled(false);
        mnuGame.add(mniRemove);

        mnbTitleBar.add(mnuGame);

        mnuHelp.setText("Help");

        mniOnlineDocs.setText("Online Docs");
        mnuHelp.add(mniOnlineDocs);

        mniManual.setText("Manual");
        mnuHelp.add(mniManual);

        mniAbout.setText("About");
        mnuHelp.add(mniAbout);

        mnbTitleBar.add(mnuHelp);

        setJMenuBar(mnbTitleBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(srpSidebarScroll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tbpGameEntries, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(srpSidebarScroll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(tbpGameEntries, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private final ImageIcon icnCollapsedIcon = new ImageIcon(getClass().getResource("/Collapsed.png"));
    private final ImageIcon icnExpandedIcon = new ImageIcon(getClass().getResource("/Expanded.png"));
    
    private static String strAdvancedPrevious = "N/A";
    
    public static Path pthDatabaseFilePath = null;
    public static String[][] smaGameData = null;
    public static Map<String, Map> mapLoadedData = new HashMap<>();
    public static Document doc = null;
    public static String[] sarPlatformList = null;
    public static int intPlatformCount = 0;
    
    // Structure: [class, macl, rate, status, year]
    private static String[][] filters = {{"", "", "", "", ""}, {"0", "999"}, {"", "", "", "", "", ""}, {"", "", "", "", ""}, {"1956", String.valueOf(getCurrentYear())}};
    
    public static boolean isSaved = true;
    
    public static String strSelectedGame = "N/A";
    
    private static String determineVisibilityStates(String strStates) {
        /**
         ************ KEY *************
         * OS = Opening search
         * CS = Closing search
         * AWO = Advanced was open
         * AWC = Advanced was closed
         * SIO = Search is open
         * OA = Opening Advanced
         * CA = Closing advanced
         */
        
        Map<String, String> mapFinalStates = new HashMap<>();
        mapFinalStates.put("CS, AWO", "false, false");
        mapFinalStates.put("CS, AWC", "false, false");
        mapFinalStates.put("OS, AWO", "true, true");
        mapFinalStates.put("OS, AWC", "true, false");
        mapFinalStates.put("SIO, OA", "true, true");
        mapFinalStates.put("SIO, CA", "true, false");
        
        return mapFinalStates.get(strStates);
    }    
    
    public static void updateInterface() {
        tbpGameEntries.removeAll();
        
        Map<String, PlatformTab> mapPlatformTabs = new HashMap<>();
        sarPlatformList = new String[intPlatformCount];

        // DO NOT remove potentially redundant for loops without aproval as they contain some vital function
        boolean barVisited[] = new boolean[smaGameData.length];
        Arrays.fill(barVisited, false);

        int intDistinctPlatforms = 0;

        // Used to count platforms and create a list of them as well as create new Platfom Tab instances for each
        for (int i = 0; i < smaGameData.length; i++) {
            if (barVisited[i] == true) {
                continue;
            }

            for (int j = i + 1; j < smaGameData.length; j++) {
                if (smaGameData[i][1].equals(smaGameData[j][1])) {
                    barVisited[j] = true;
                }
            }

            intDistinctPlatforms = intDistinctPlatforms + 1;
            sarPlatformList[intDistinctPlatforms - 1] = smaGameData[i][1];
            mapPlatformTabs.put(sarPlatformList[intDistinctPlatforms - 1], new PlatformTab());
        }

        // Add tabs to the interface
        for (int i = 0; i < intDistinctPlatforms; i++) {
            tbpGameEntries.addTab(sarPlatformList[i], mapPlatformTabs.get(sarPlatformList[i]));
        }

        Map<String, Map> mapPlatforms = new HashMap<>();

        // Create new map for each platform to contain the game entries
        for (String strCurrentPlatform : sarPlatformList) {
            Map<String, GameEntry> mapGames = new HashMap<>();
            mapPlatforms.put(strCurrentPlatform, mapGames);

            Map<String, String[]> mapGameData = new HashMap<>();
            mapLoadedData.put(strCurrentPlatform, mapGameData);
        }

        // Create, store, and add game entries to the interface
        for (String[] sarCurrentGameData : smaGameData) {
            Map<String, GameEntry> mapCurrentPlatformUI = mapPlatforms.get(sarCurrentGameData[1]);
            mapCurrentPlatformUI.put(sarCurrentGameData[0], new GameEntry());

            GameEntry gmeCurrentGame = mapCurrentPlatformUI.get(sarCurrentGameData[0]);
            gmeCurrentGame.setFields(sarCurrentGameData);

            PlatformTab pmtCurrentTab = mapPlatformTabs.get(sarCurrentGameData[1]);
            pmtCurrentTab.tabMainPanel.add(gmeCurrentGame);
            bgpGameSelection.add(gmeCurrentGame);

            Map mapCurrentPlatformData = mapLoadedData.get(sarCurrentGameData[1]);
            mapCurrentPlatformData.put(sarCurrentGameData[0], sarCurrentGameData);
        }
    }
    
    private void applyFilters() {
        if (mniLoad.isEnabled() == true) {
            System.out.println("Please load data first");
        } else {
            PlatformTab currentTab = (PlatformTab) tbpGameEntries.getSelectedComponent();
            for (int i = 1; i < currentTab.tabMainPanel.getComponentCount(); i++) {
                GameEntry currentGame = (GameEntry) currentTab.tabMainPanel.getComponent(i);
                
                
                // Classification
                for (int j = 0; j < filters[0].length; j++) {
                    if (filters[0][j].equals(currentGame.sarThisGameData[5])) {
                        currentGame.setVisible(true);
                        break;
                    } else {
                        currentGame.setVisible(false);
                    }
                }
                
                /*
                // Length
                for (int j = 0; j < filters[1].length; j++) {
                    if (filters[1][j].equals(currentGame.sarThisGameData[4])) {
                        currentGame.setVisible(true);
                    } else {
                        currentGame.setVisible(false);
                    }
                }
                */
                
                // Rating
                for (int j = 0; j < filters[2].length; j++) {
                    if (filters[2][j].equals(currentGame.sarThisGameData[8])) {
                        currentGame.setVisible(true);
                        break;
                    } else {
                        currentGame.setVisible(false);
                    }
                }
                
                // Play Status
                for (int j = 0; j < filters[3].length; j++) {
                    if (filters[3][j].equals(currentGame.sarThisGameData[7])) {
                        currentGame.setVisible(true);
                        break;
                    } else {
                        currentGame.setVisible(false);
                    }
                }
                
                /*
                // Release Year
                for (int j = 0; j < filters[4].length; j++) {
                    if (filters[4][j].equals(currentGame.sarThisGameData[6])) {
                        currentGame.setVisible(true);
                    } else {
                        currentGame.setVisible(false);
                    }
                }
                */
            }
        }
    }
    
    public static int getCurrentYear() {
        DateFormat dateFormat = new SimpleDateFormat("yyyy");
        Date date = new Date();
        int currentYear = Integer.parseInt(dateFormat.format(date));
        return currentYear;
    }
    
    //<editor-fold defaultstate="collapsed" desc="UI Setup Functions">
    private void btnSearchMenuToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchMenuToggleActionPerformed
        boolean searchState = pnlSearchMenu.isVisible();
        boolean advancedState = pnlAdvancedSearch.isVisible();
        String searchCode = "N/A";
        String advancedCode = "N/A";
        
        if (searchState == true) searchCode = "CS";
        else if (searchState == false) searchCode = "OS";
        
        if (advancedState == true) advancedCode = "AWO";
        else if (advancedState == false) advancedCode = "AWC";
        
        if (searchCode == "OS") advancedCode = strAdvancedPrevious;
        
        String newStates = determineVisibilityStates(searchCode + ", " + advancedCode);
        
        strAdvancedPrevious = advancedCode;
        
        String[] bools = newStates.split(", ");
        
        pnlSearchMenu.setVisible(Boolean.parseBoolean(bools[0]));
        btnAdvancedSearchToggle.setVisible(Boolean.parseBoolean(bools[0]));
        pnlAdvancedSearch.setVisible(Boolean.parseBoolean(bools[1]));
        
        if (pnlSearchMenu.isVisible()) btnSearchMenuToggle.setIcon(icnExpandedIcon);
        else btnSearchMenuToggle.setIcon(icnCollapsedIcon);
    }//GEN-LAST:event_btnSearchMenuToggleActionPerformed

    private void btnAdvancedSearchToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdvancedSearchToggleActionPerformed
        boolean advancedState = pnlAdvancedSearch.isVisible();
        String searchCode = "SIO";
        String advancedCode = "N/A";
        
        if (advancedState == true) advancedCode = "CA";
        else if (advancedState == false) advancedCode = "OA";
        
        strAdvancedPrevious = advancedCode;
        
        String newStates = determineVisibilityStates(searchCode + ", " + advancedCode);
        
        String[] bools = newStates.split(", ");
        
        pnlSearchMenu.setVisible(Boolean.parseBoolean(bools[0]));
        btnAdvancedSearchToggle.setVisible(Boolean.parseBoolean(bools[0]));
        pnlAdvancedSearch.setVisible(Boolean.parseBoolean(bools[1]));
        
        if (pnlAdvancedSearch.isVisible()) btnAdvancedSearchToggle.setIcon(icnExpandedIcon);
        else btnAdvancedSearchToggle.setIcon(icnCollapsedIcon);
    }//GEN-LAST:event_btnAdvancedSearchToggleActionPerformed

    private void btnClassificationToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClassificationToggleActionPerformed
        pnlClassificationFilter.setVisible(!pnlClassificationFilter.isVisible());
        if (pnlClassificationFilter.isVisible()) btnClassificationToggle.setIcon(icnExpandedIcon);
        else btnClassificationToggle.setIcon(icnCollapsedIcon);
    }//GEN-LAST:event_btnClassificationToggleActionPerformed

    private void btnMACLToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMACLToggleActionPerformed
        pnlMACLFilter.setVisible(!pnlMACLFilter.isVisible());
        if (pnlMACLFilter.isVisible()) btnMACLToggle.setIcon(icnExpandedIcon);
        else btnMACLToggle.setIcon(icnCollapsedIcon);
    }//GEN-LAST:event_btnMACLToggleActionPerformed

    private void btnRatingToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRatingToggleActionPerformed
        pnlRatingFilter.setVisible(!pnlRatingFilter.isVisible());
        if (pnlRatingFilter.isVisible()) btnRatingToggle.setIcon(icnExpandedIcon);
        else btnRatingToggle.setIcon(icnCollapsedIcon);
    }//GEN-LAST:event_btnRatingToggleActionPerformed

    private void btnStatusToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStatusToggleActionPerformed
        pnlStatusFilter.setVisible(!pnlStatusFilter.isVisible());
        if (pnlStatusFilter.isVisible()) btnStatusToggle.setIcon(icnExpandedIcon);
        else btnStatusToggle.setIcon(icnCollapsedIcon);
    }//GEN-LAST:event_btnStatusToggleActionPerformed

    private void btnYearToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnYearToggleActionPerformed
        pnlYearFilter.setVisible(!pnlYearFilter.isVisible());
        if (pnlYearFilter.isVisible()) btnYearToggle.setIcon(icnExpandedIcon);
        else btnYearToggle.setIcon(icnCollapsedIcon);
    }//GEN-LAST:event_btnYearToggleActionPerformed

    private void rslMACLSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rslMACLSliderStateChanged
        txtSetMinMACL.setText(Integer.toString(rslMACLSlider.getValue()));
        txtSetMaxMACL.setText(Integer.toString(rslMACLSlider.getSecondValue()));
        filters[1][0] = String.valueOf(rslMACLSlider.getValue());
        filters[1][1] = String.valueOf(rslMACLSlider.getSecondValue());
        applyFilters();
    }//GEN-LAST:event_rslMACLSliderStateChanged

    private void txtSetMinMACLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSetMinMACLActionPerformed
        rslMACLSlider.setValue(Integer.parseInt(txtSetMinMACL.getText()));
        filters[1][0] = txtSetMinMACL.getText();
        applyFilters();
    }//GEN-LAST:event_txtSetMinMACLActionPerformed

    private void txtSetMaxMACLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSetMaxMACLActionPerformed
        rslMACLSlider.setSecondValue(Integer.parseInt(txtSetMaxMACL.getText()));
        filters[1][1] = txtSetMaxMACL.getText();
        applyFilters();
    }//GEN-LAST:event_txtSetMaxMACLActionPerformed

    private void rslYearSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rslYearSliderStateChanged
        txtSetMinYear.setText(Integer.toString(rslYearSlider.getValue()));
        txtSetMaxYear.setText(Integer.toString(rslYearSlider.getSecondValue()));
        filters[4][0] = String.valueOf(rslYearSlider.getValue());
        filters[4][1] = String.valueOf(rslYearSlider.getSecondValue());
        applyFilters();
    }//GEN-LAST:event_rslYearSliderStateChanged

    private void txtSetMinYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSetMinYearActionPerformed
        rslYearSlider.setValue(Integer.parseInt(txtSetMinYear.getText()));
        filters[4][0] = txtSetMinYear.getText();
        applyFilters();
    }//GEN-LAST:event_txtSetMinYearActionPerformed

    private void txtSetMaxYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSetMaxYearActionPerformed
        rslYearSlider.setSecondValue(Integer.parseInt(txtSetMaxYear.getText()));
        filters[4][1] = txtSetMaxYear.getText();
        applyFilters();
    }//GEN-LAST:event_txtSetMaxYearActionPerformed
    //</editor-fold>
    
    private void mniAddNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniAddNewActionPerformed
        GameDataWindow winAddGame = new GameDataWindow();
        winAddGame.setWindowType("add");
        winAddGame.setVisible(true);
    }//GEN-LAST:event_mniAddNewActionPerformed

    private void mniUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniUpdateActionPerformed
        try {
            GameDataWindow winUpdateGame = new GameDataWindow();
            winUpdateGame.setWindowType("edit");
            
            String strCurrentPlatformTitle = tbpGameEntries.getTitleAt(tbpGameEntries.getSelectedIndex());
            Map mapCurrentPlatformEntries = mapLoadedData.get(strCurrentPlatformTitle);
            String[] sarCurrentGameData = (String[]) mapCurrentPlatformEntries.get(strSelectedGame);
            winUpdateGame.loadCurrentGameData(sarCurrentGameData);
            
            winUpdateGame.setVisible(true);
        } catch (NullPointerException exc) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.WARNING, null, exc);
            System.err.println("Most likely no game selected: strSelectedGame = " + strSelectedGame);
        }
    }//GEN-LAST:event_mniUpdateActionPerformed

    private void mniLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniLoadActionPerformed
        JFileChooser jfcFileBrowser = new JFileChooser(System.getProperty("user.dir") + "\\src\\main\\resources\\");
        jfcFileBrowser.setSelectedFile(new File("database.xml"));
        jfcFileBrowser.addChoosableFileFilter(new FileNameExtensionFilter("XML Files", "xml"));
        jfcFileBrowser.setAcceptAllFileFilterUsed(false);
        int intResponse =  jfcFileBrowser.showOpenDialog(null);
        
        if (intResponse == JFileChooser.APPROVE_OPTION) {
            pthDatabaseFilePath = Paths.get(jfcFileBrowser.getSelectedFile().getAbsolutePath());
        }
        else {
            return;
        }
        
        //<editor-fold defaultstate="collapsed" desc="XML Loading">
        try {
            DocumentBuilder dcbBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
            Document docXMLFile = dcbBuilder.parse(new File(pthDatabaseFilePath.toString()));
            docXMLFile.getDocumentElement().normalize();
            doc = docXMLFile;
            
            Element elmRoot = docXMLFile.getDocumentElement();
            
            NodeList ndlEntryNodes = elmRoot.getChildNodes();
            
            /**
             * Outstanding error affects the following code.
             * Error effectively doubles file length, resulting in the need to divide the file length by two and 
             *  use of the variable 'intIncrementNoSkip'
             */
            
            // Stucture: [id, platform, boxart path, title, length, class, year, status, rating, notes]
            smaGameData = new String[ndlEntryNodes.getLength()/2][10];
            
            int intIncrementNoSkip = 0;
            int intIndexAfterAttr = 2;
            
            // Loop through the database and add each game to the data array
            for (int i = 0; i < smaGameData[0].length - 1; i++) {
                Node nodCurrent = ndlEntryNodes.item(i);
                
                if (nodCurrent != null && nodCurrent.getNodeType() == Node.ELEMENT_NODE) {
                    NamedNodeMap nnmAttrList = nodCurrent.getAttributes();
                    
                    for (int j = 0; j < nnmAttrList.getLength(); j++) {
                        smaGameData[intIncrementNoSkip][j] = nnmAttrList.item(j).getNodeValue();
                    }
                
                    NodeList ndlDataList = nodCurrent.getChildNodes();
                    Node nodCurrentChild;

                    for (int k = 0; k < ndlDataList.getLength() - 1; k++) {
                        nodCurrentChild = ndlDataList.item(k);
                        if (nodCurrentChild.getNodeType() == Node.ELEMENT_NODE) {
                            smaGameData[intIncrementNoSkip][intIndexAfterAttr] = nodCurrentChild.getTextContent();
                            intIndexAfterAttr++;
                        }
                    }
                    intIndexAfterAttr = 2;
                    intIncrementNoSkip++;
                }
            }
            
            intPlatformCount = Integer.parseInt(elmRoot.getAttributes().item(0).getTextContent());
        } catch (ParserConfigurationException | SAXException | IOException exc) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, exc);
        }
        //</editor-fold>
        
        updateInterface();
        
        // Prevent consecutive loading of multiple files
        mniLoad.setEnabled(false);
        mniAddNew.setEnabled(true);
        mniUpdate.setEnabled(true);
        mniSave.setEnabled(true);
    }//GEN-LAST:event_mniLoadActionPerformed

    private void mniQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniQuitActionPerformed
        if (isSaved == false) {
            int intConfirmExit = (int) JOptionPane.showConfirmDialog(null, "Unsaved data!\nDo you wish to proceed?", "Unsaved Data", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE);
            if (intConfirmExit == 0) System.exit(0);
        } else {
            System.exit(0);
        }
    }//GEN-LAST:event_mniQuitActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (isSaved == false) {
            int intConfirmExit = (int) JOptionPane.showConfirmDialog(null, "Unsaved data!\nDo you wish to proceed?", "Unsaved Data", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE);
            if (intConfirmExit == 0) System.exit(0);
        } else {
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    private void mniSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniSaveActionPerformed
        JOptionPane.showMessageDialog(null, "Database Saved Successfully");
        if (isSaved != true) isSaved = true;
    }//GEN-LAST:event_mniSaveActionPerformed

    //<editor-fold defaultstate="collapsed" desc="Set Filters">
    private void cbxRatedGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxRatedGActionPerformed
        filters[0][0] = cbxRatedG.isSelected() ? "G" : "";
        applyFilters();
    }//GEN-LAST:event_cbxRatedGActionPerformed

    private void cbxRatedPGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxRatedPGActionPerformed
        filters[0][1] = cbxRatedPG.isSelected() ? "PG" : "";
        applyFilters();
    }//GEN-LAST:event_cbxRatedPGActionPerformed

    private void cbxRatedMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxRatedMActionPerformed
        filters[0][2] = cbxRatedM.isSelected() ? "M" : "";
        applyFilters();
    }//GEN-LAST:event_cbxRatedMActionPerformed

    private void cbxRatedMA15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxRatedMA15ActionPerformed
        filters[0][3] = cbxRatedMA15.isSelected() ? "MA15" : "";
        applyFilters();
    }//GEN-LAST:event_cbxRatedMA15ActionPerformed

    private void cbxRatedR18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxRatedR18ActionPerformed
        filters[0][4] = cbxRatedR18.isSelected() ? "R18" : "";
        applyFilters();
    }//GEN-LAST:event_cbxRatedR18ActionPerformed

    private void cbx0StarsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbx0StarsActionPerformed
        filters[2][0] = cbx0Stars.isSelected() ? "0" : "";
        applyFilters();
    }//GEN-LAST:event_cbx0StarsActionPerformed

    private void cbx1StarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbx1StarActionPerformed
        filters[2][1] = cbx1Star.isSelected() ? "1" : "";
        applyFilters();
    }//GEN-LAST:event_cbx1StarActionPerformed

    private void cbx2StarsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbx2StarsActionPerformed
        filters[2][2] = cbx2Stars.isSelected() ? "2" : "";
        applyFilters();
    }//GEN-LAST:event_cbx2StarsActionPerformed

    private void cbx3StarsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbx3StarsActionPerformed
        filters[2][3] = cbx3Stars.isSelected() ? "3" : "";
        applyFilters();
    }//GEN-LAST:event_cbx3StarsActionPerformed

    private void cbx4StarsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbx4StarsActionPerformed
        filters[2][4] = cbx4Stars.isSelected() ? "4" : "";
        applyFilters();
    }//GEN-LAST:event_cbx4StarsActionPerformed

    private void cbx5StarsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbx5StarsActionPerformed
        filters[2][5] = cbx5Stars.isSelected() ? "5" : "";
        applyFilters();
    }//GEN-LAST:event_cbx5StarsActionPerformed

    private void cbxNotPlayingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxNotPlayingActionPerformed
        filters[3][0] = cbxNotPlaying.isSelected() ? "NP" : "";
        applyFilters();
    }//GEN-LAST:event_cbxNotPlayingActionPerformed

    private void cbxInProgressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxInProgressActionPerformed
        filters[3][1] = cbxInProgress.isSelected() ? "IP" : "";
        applyFilters();
    }//GEN-LAST:event_cbxInProgressActionPerformed

    private void cbxFinishedGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxFinishedGameActionPerformed
        filters[3][2] = cbxFinishedGame.isSelected() ? "FG" : "";
        applyFilters();
    }//GEN-LAST:event_cbxFinishedGameActionPerformed

    private void cbxFinishedStoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxFinishedStoryActionPerformed
        filters[3][3] = cbxFinishedStory.isSelected() ? "FG" : "";
        applyFilters();
    }//GEN-LAST:event_cbxFinishedStoryActionPerformed

    private void cbxAbandonedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxAbandonedActionPerformed
        filters[3][4] = cbxAbandoned.isSelected() ? "AB" : "";
        applyFilters();
    }//GEN-LAST:event_cbxAbandonedActionPerformed
    //</editor-fold>
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    //<editor-fold defaultstate="collapsed" desc="Variables declaration">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.ButtonGroup bgpGameSelection;
    private javax.swing.ButtonGroup bgpSearchCategories;
    private javax.swing.JButton btnAdvancedSearchToggle;
    private javax.swing.JButton btnClassificationToggle;
    private javax.swing.JButton btnMACLToggle;
    private javax.swing.JButton btnRatingToggle;
    private javax.swing.JButton btnSearchButton;
    private javax.swing.JButton btnSearchMenuToggle;
    private javax.swing.JButton btnStatusToggle;
    private javax.swing.JButton btnYearToggle;
    private javax.swing.JCheckBox cbx0Stars;
    private javax.swing.JCheckBox cbx1Star;
    private javax.swing.JCheckBox cbx2Stars;
    private javax.swing.JCheckBox cbx3Stars;
    private javax.swing.JCheckBox cbx4Stars;
    private javax.swing.JCheckBox cbx5Stars;
    private javax.swing.JCheckBox cbxAbandoned;
    private javax.swing.JCheckBox cbxExactSearch;
    private javax.swing.JCheckBox cbxFinishedGame;
    private javax.swing.JCheckBox cbxFinishedStory;
    private javax.swing.JCheckBox cbxInProgress;
    private javax.swing.JCheckBox cbxNotPlaying;
    private javax.swing.JCheckBox cbxRatedG;
    private javax.swing.JCheckBox cbxRatedM;
    private javax.swing.JCheckBox cbxRatedMA15;
    private javax.swing.JCheckBox cbxRatedPG;
    private javax.swing.JCheckBox cbxRatedR18;
    private javax.swing.JLabel lblAbsoluteEarliestYear;
    private javax.swing.JLabel lblAbsoluteLatestYear;
    private javax.swing.JLabel lblAbsoluteMaxMACL;
    private javax.swing.JLabel lblAbsoluteMinMACL;
    private javax.swing.JLabel lblFilters;
    private javax.swing.JLabel lblSearchCategory;
    private javax.swing.JLabel lblSetMaxMACL;
    private javax.swing.JLabel lblSetMaxYear;
    private javax.swing.JLabel lblSetMinMACL;
    private javax.swing.JLabel lblSetMinYear;
    private javax.swing.JMenuBar mnbTitleBar;
    private javax.swing.JMenuItem mniAbout;
    private javax.swing.JMenuItem mniAddNew;
    private javax.swing.JMenuItem mniLoad;
    private javax.swing.JMenuItem mniManual;
    private javax.swing.JMenuItem mniOnlineDocs;
    private javax.swing.JMenuItem mniQuit;
    private javax.swing.JMenuItem mniRemove;
    private javax.swing.JMenuItem mniSave;
    private javax.swing.JMenuItem mniUpdate;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenu mnuGame;
    private javax.swing.JMenu mnuHelp;
    private javax.swing.JPanel pnlAdvancedSearch;
    private javax.swing.JPanel pnlClassificationFilter;
    private javax.swing.JPanel pnlMACLFilter;
    private javax.swing.JPanel pnlRatingFilter;
    private javax.swing.JPanel pnlSearchMenu;
    private javax.swing.JPanel pnlSidebarInner;
    private javax.swing.JPanel pnlStatusFilter;
    private javax.swing.JPanel pnlYearFilter;
    private JRangeSlider rslMACLSlider;
    private JRangeSlider rslYearSlider;
    private javax.swing.JRadioButton rtnNotesCategory;
    private javax.swing.JRadioButton rtnTitleCategory;
    private javax.swing.JScrollPane srpSidebarScroll;
    private static javax.swing.JTabbedPane tbpGameEntries;
    private javax.swing.JTextField txtSearchQuery;
    private javax.swing.JTextField txtSetMaxMACL;
    private javax.swing.JTextField txtSetMaxYear;
    private javax.swing.JTextField txtSetMinMACL;
    private javax.swing.JTextField txtSetMinYear;
    // End of variables declaration//GEN-END:variables
    //</editor-fold>
}
