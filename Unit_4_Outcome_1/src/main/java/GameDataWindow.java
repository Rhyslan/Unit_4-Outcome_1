
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;


/**
 *
 * @author dylan
 */
public class GameDataWindow extends javax.swing.JFrame {

    /**
     * Creates new form GameDataWindow
     */
    public GameDataWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        txtGameName = new javax.swing.JTextField();
        lblPlatform = new javax.swing.JLabel();
        cmbPlatformSelector = new javax.swing.JComboBox<>();
        lblBoxArt = new javax.swing.JLabel();
        lblBoxArtImage = new javax.swing.JLabel();
        btnLoadImage = new javax.swing.JButton();
        btnRemoveImage = new javax.swing.JButton();
        lblReleaseYear = new javax.swing.JLabel();
        cmbReleaseYearSelector = new javax.swing.JComboBox<>();
        lblPlayStatus = new javax.swing.JLabel();
        cmbPlayStatus = new javax.swing.JComboBox<>();
        lblRating = new javax.swing.JLabel();
        btnRemoveGame = new javax.swing.JButton();
        scrNotes = new javax.swing.JScrollPane();
        txaNotes = new javax.swing.JTextArea();
        lblClassification = new javax.swing.JLabel();
        cmbClassificationSelector = new javax.swing.JComboBox<>();
        lblMACL = new javax.swing.JLabel();
        txtMACLEntry = new javax.swing.JTextField();
        btnCancel = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        srtRatingSelector = new StarRating();
        btnSetRatingZero = new javax.swing.JButton();
        lblNotes = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Level-Up Library - Game Data Window");

        lblTitle.setText("Game Title:");

        txtGameName.setText("Game Name");
        txtGameName.setMinimumSize(new java.awt.Dimension(250, 22));
        txtGameName.setPreferredSize(new java.awt.Dimension(250, 22));

        lblPlatform.setText("Platform:");

        cmbPlatformSelector.setEditable(true);
        cmbPlatformSelector.setPreferredSize(new java.awt.Dimension(150, 22));

        lblBoxArt.setText("Box Art Image:");

        lblBoxArtImage.setBackground(new java.awt.Color(255, 0, 0));
        lblBoxArtImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblBoxArtImage.setText("No Image");
        lblBoxArtImage.setMinimumSize(new java.awt.Dimension(150, 225));
        lblBoxArtImage.setPreferredSize(new java.awt.Dimension(150, 225));

        btnLoadImage.setText("Load");
        btnLoadImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadImageActionPerformed(evt);
            }
        });

        btnRemoveImage.setText("Clear");
        btnRemoveImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveImageActionPerformed(evt);
            }
        });

        lblReleaseYear.setText("Release Year:");

        cmbReleaseYearSelector.setPreferredSize(new java.awt.Dimension(100, 22));

        lblPlayStatus.setText("Play Status:");

        cmbPlayStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NP", "IP", "FG", "FS", "AB" }));

        lblRating.setText("Rating:");

        btnRemoveGame.setText("Remove");
        btnRemoveGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveGameActionPerformed(evt);
            }
        });

        txaNotes.setColumns(20);
        txaNotes.setLineWrap(true);
        txaNotes.setRows(5);
        scrNotes.setViewportView(txaNotes);

        lblClassification.setText("Classification:");

        cmbClassificationSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "G", "PG", "M", "MA15+", "R18+" }));
        cmbClassificationSelector.setToolTipText("");

        lblMACL.setText("MACL:");

        txtMACLEntry.setText("0");

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        srtRatingSelector.mthSetIsSelector(true);

        btnSetRatingZero.setText("Clear");
        btnSetRatingZero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetRatingZeroActionPerformed(evt);
            }
        });

        lblNotes.setText("Notes:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(373, 373, 373)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnSave)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCancel))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblRating, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(srtRatingSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblPlayStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cmbReleaseYearSelector, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cmbPlayStatus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblClassification, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(lblMACL, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(28, 28, 28)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cmbClassificationSelector, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtMACLEntry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(36, 36, 36))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtGameName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblReleaseYear, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(14, 14, 14)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(btnLoadImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(btnRemoveImage))
                                                    .addComponent(lblBoxArt, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGap(29, 29, 29)
                                        .addComponent(lblBoxArtImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(40, 40, 40)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(btnSetRatingZero, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                        .addComponent(lblPlatform, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE))
                                    .addComponent(lblNotes))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cmbPlatformSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(127, 127, 127)
                                .addComponent(btnRemoveGame)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(scrNotes, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtGameName, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblTitle)
                        .addComponent(lblPlatform)
                        .addComponent(cmbPlatformSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnRemoveGame)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblBoxArtImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblNotes))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(lblBoxArt)
                                .addGap(43, 43, 43)
                                .addComponent(btnLoadImage)
                                .addGap(18, 18, 18)
                                .addComponent(btnRemoveImage)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblReleaseYear)
                                    .addComponent(cmbReleaseYearSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblPlayStatus)
                                    .addComponent(cmbPlayStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblClassification)
                                    .addComponent(cmbClassificationSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblMACL)
                                    .addComponent(txtMACLEntry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblRating)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSetRatingZero)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(scrNotes, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(srtRatingSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnSave))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //<editor-fold defaultstate="expanded" desc="Local Variables">
    // Stucture: [id, platform, boxart path, title, length, class, year, status, rating, notes]
    public static String[] sarCurrentGameData = new String[10];
    private static String strWindowType = "";
    //</editor-fold>
    
    /**
     * Gets the current year and adds every year between 1958 and the current year to the year selector combo box
     */
    public void mthSetYearSelector() {
        int intCurrentYear = MainWindow.mthGetCurrentYear();
        
        for (int i = 1958; i < intCurrentYear + 1; i++) {
            cmbReleaseYearSelector.addItem(String.valueOf(i));
        }
    }
    
    /**
     * Takes an input array of data for a game and loads the appropriate values into each field of the game data window
     * @param sarData 
     */
    public void mthLoadCurrentGameData(String[] sarData) {
        // Store input data locally
        sarCurrentGameData = sarData;
        
        /** 
         * Get the box art image from the provided relative path and resize it to fit the label
         * If the image cannot be loaded for whatever reason, the label's text states the inability to load the image
         */
        BufferedImage bimBoxArtImage = null;
        try {
            bimBoxArtImage = ImageIO.read(new File(System.getProperty("user.dir") + "\\src\\main\\resources\\" + 
                    sarData[2]));
        } catch (IOException exc) {
            System.err.println(new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date()) + " " + 
                    "Unable to load boxart image for " + sarCurrentGameData[0] + " on " + sarCurrentGameData[1]);
        }
        if (bimBoxArtImage != null) {
            lblBoxArtImage.setText("");
            Image imgBoxArtImage = bimBoxArtImage.getScaledInstance(lblBoxArtImage.getWidth(), 
                    lblBoxArtImage.getHeight(), Image.SCALE_SMOOTH);
            ImageIcon icnBoxArt = new ImageIcon(imgBoxArtImage, imgBoxArtImage.toString());
            lblBoxArtImage.setIcon(icnBoxArt);
        } else {
            lblBoxArtImage.setText("Unable to load image");
        }
        
        // Initialise and set the year selector
        mthSetYearSelector();
        cmbReleaseYearSelector.getModel().setSelectedItem(sarData[6]);
        
        // Set the values of the remaining game data fields
        txtGameName.setText(sarData[3]);
        txtMACLEntry.setText(sarData[4]);
        cmbPlatformSelector.getModel().setSelectedItem(sarData[1]);
        cmbClassificationSelector.getModel().setSelectedItem(sarData[5]);
        cmbPlayStatus.getModel().setSelectedItem(sarData[7]);
        srtRatingSelector.mthSetRating(Integer.parseInt(sarData[8]));
        txaNotes.setText(sarData[9]);
    }
    
    /**
     * Sets up the window depending on the type of window specified when instanced
     * @param strType 
     */
    public void mthSetWindowType(String strType) {
        // Store the window type
        strWindowType = strType;
        
        // Set up the platform selector
        for (int i = 0; i < MainWindow.intPlatformCount; i++) {
            cmbPlatformSelector.addItem(MainWindow.sarPlatformList[i]);
        }
        
        /**
         * Set the title and year selector, while clearing the remaining combo boxes and disabling the remove button 
         *  for adding a new entry
         */
        if ("add".equals(strType)) {
            this.setTitle("Level-Up Library - Add Game");
            btnRemoveGame.setEnabled(false);
            mthSetYearSelector();
            cmbPlatformSelector.setSelectedIndex(-1);
            cmbClassificationSelector.setSelectedIndex(0);
            cmbPlayStatus.setSelectedIndex(0);
            cmbReleaseYearSelector.setSelectedItem(MainWindow.mthGetCurrentYear());
        } 
        // Set the title for updating an exisitng entry
        else if ("edit".equals(strType)) {
            this.setTitle("Level-Up Library - Update Game");
        }
    }
    
    /**
     * Updates the local data storage and writes the changes to the database
     * If the platform is changed to one that doesn't already have entries, it is added to the list of platforms
     * The interface is updated and the user is notified of success
     */
    private void mthSaveToDatabase() {
        XPathFactory xpfXPathFactory = XPathFactory.newInstance();
        XPath xpaXPath = xpfXPathFactory.newXPath();
        
        try {
            // Get the current node of the loaded XML file by the ID of the current game and get the children nodes
            XPathExpression xpeExpr = xpaXPath.compile("/gameList/game[@id = '" + sarCurrentGameData[0] + "']");
            Node nodCurrentNode = (Node) xpeExpr.evaluate(MainWindow.docXMLFile, XPathConstants.NODE);
            NodeList ndlChildren = nodCurrentNode.getChildNodes();
            Node nodChild;
            
            // Set the platform of the updated game
            nodCurrentNode.getAttributes().item(1).setTextContent(sarCurrentGameData[1]);
            
            // Update the platform list if the platform is new
            if (!MainWindow.docXMLFile.getDocumentElement().getAttribute("platformList").contains(sarCurrentGameData[1])) {
                // Update loaded XML file
                MainWindow.docXMLFile.getDocumentElement().setAttribute("platformList", 
                        MainWindow.docXMLFile.getDocumentElement().getAttribute("platformList") + ", " + 
                                sarCurrentGameData[1]);

                // Update data arrays
                String[] smaUpdatedPlatforms = new String[MainWindow.sarPlatformList.length + 1];
                System.arraycopy(MainWindow.sarPlatformList, 0, smaUpdatedPlatforms, 0, 
                        MainWindow.sarPlatformList.length);
                smaUpdatedPlatforms[MainWindow.sarPlatformList.length] = sarCurrentGameData[1];
                MainWindow.sarPlatformList = new String[smaUpdatedPlatforms.length];
                System.arraycopy(smaUpdatedPlatforms, 0, MainWindow.sarPlatformList, 0, 
                        smaUpdatedPlatforms.length);
                MainWindow.intPlatformCount++;
            }
            
            // Update the child nodes of the current entry
            int intIndexAfterAttr = 2;
            for (int i = 0; i < ndlChildren.getLength(); i++) {
                nodChild = ndlChildren.item(i);
                
                // Skip blank nodes
                if (nodChild != null && nodChild.getNodeType() == Node.ELEMENT_NODE) {
                    nodChild.setTextContent(sarCurrentGameData[intIndexAfterAttr]);
                    intIndexAfterAttr++;
                }
            }
            
            // Create the temp file to store the decrypted database as an XML file
            File filTempFile = new File(MainWindow.pthDatabaseFilePath.toString().replace(".encrypted", 
                    ".xml"));
            filTempFile.createNewFile();
            MainWindow.pthTempFile = filTempFile.toPath();
            
            // Decrypt the database and write it to the temp file
            CryptoUtils.mthDecryptFile(MainWindow.barEncryptionKey, MainWindow.pthDatabaseFilePath.toFile(), 
                    MainWindow.pthTempFile.toFile());
            
            // Create a XML transformer and write the loaded XML file to the temp file
            TransformerFactory tffTransformerFactory = TransformerFactory.newInstance();
            Transformer tsfTransformer = tffTransformerFactory.newTransformer();
            tsfTransformer.setOutputProperty(OutputKeys.INDENT, "yes");
            DOMSource dmsSource = new DOMSource(MainWindow.docXMLFile);
            FileOutputStream fosOutput = new FileOutputStream(MainWindow.pthTempFile.toString());
            StreamResult smrResult = new StreamResult(fosOutput);
            tsfTransformer.transform(dmsSource, smrResult);
            
            // Re-encrypt the database and delete the temp file
            CryptoUtils.mthEncryptFile(MainWindow.barEncryptionKey, MainWindow.pthTempFile.toFile(), 
                    MainWindow.pthDatabaseFilePath.toFile());
            fosOutput.close();
            filTempFile.delete();
        } catch (XPathExpressionException | TransformerException | IOException | CryptoException exc) {
            // Log any errors and notify the user of failure
            System.err.println(new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date()) + " " + exc);
            JOptionPane.showMessageDialog(this, "Game Failed To Be Updated");
        }
        
        // Close the window, update the interface, flag 'unsaved' actions and notify the user of success
        this.dispose();
        MainWindow.mthUpdateInterface();
        MainWindow.blnIsSaved = false;
        JOptionPane.showMessageDialog(null, "Game Updated Successfully");
    }
    
    /**
     * Adds a new entry the local data storage and writes the changes to the database
     * If the platform is one that doesn't already have entries, it is added to the list of platforms
     * The interface is updated and the user is notified of success
     */
    private void mthAddNewToDatabase() {
        //<editor-fold defaultstate="collapsed" desc="Create new XML element">
        // Create new 'game' XML element
        Element elmNewGame = MainWindow.docXMLFile.createElement("game");

        // Create and set the ID and platform attributes
        elmNewGame.setAttribute("id", sarCurrentGameData[0]);
        elmNewGame.setAttribute("platform", sarCurrentGameData[1]);
        
        // Update the platform list if the platform is new
        if (!MainWindow.docXMLFile.getDocumentElement().getAttribute("platformList").contains(sarCurrentGameData[1])) {
            // Update loaded XML file
            MainWindow.docXMLFile.getDocumentElement().setAttribute("platformList", 
                    MainWindow.docXMLFile.getDocumentElement().getAttribute("platformList") + ", " + 
                            sarCurrentGameData[1]);
            
            // Update data arrays
            String[] smaUpdatedPlatforms = new String[MainWindow.sarPlatformList.length + 1];
            System.arraycopy(MainWindow.sarPlatformList, 0, smaUpdatedPlatforms, 0, 
                    MainWindow.sarPlatformList.length);
            smaUpdatedPlatforms[MainWindow.sarPlatformList.length] = sarCurrentGameData[1];
            MainWindow.sarPlatformList = new String[smaUpdatedPlatforms.length];
            System.arraycopy(smaUpdatedPlatforms, 0, MainWindow.sarPlatformList, 0, 
                    smaUpdatedPlatforms.length);
            MainWindow.intPlatformCount++;
        }

        // Create, set and add the child nodes to the 'game' node
        Element emlBoxArt = MainWindow.docXMLFile.createElement("boxArt");
        emlBoxArt.appendChild(MainWindow.docXMLFile.createTextNode(sarCurrentGameData[2]));
        elmNewGame.appendChild(emlBoxArt);

        Element emlGameName = MainWindow.docXMLFile.createElement("gameName");
        emlGameName.appendChild(MainWindow.docXMLFile.createTextNode(sarCurrentGameData[3]));
        elmNewGame.appendChild(emlGameName);

        Element emlMACL = MainWindow.docXMLFile.createElement("MACL");
        emlMACL.appendChild(MainWindow.docXMLFile.createTextNode(sarCurrentGameData[4]));
        elmNewGame.appendChild(emlMACL);

        Element emlClassification = MainWindow.docXMLFile.createElement("classification");
        emlClassification.appendChild(MainWindow.docXMLFile.createTextNode(sarCurrentGameData[5]));
        elmNewGame.appendChild(emlClassification);

        Element emlReleaseYear = MainWindow.docXMLFile.createElement("releaseYear");
        emlReleaseYear.appendChild(MainWindow.docXMLFile.createTextNode(sarCurrentGameData[6]));
        elmNewGame.appendChild(emlReleaseYear);

        Element emlPlayStatus = MainWindow.docXMLFile.createElement("playStatus");
        emlPlayStatus.appendChild(MainWindow.docXMLFile.createTextNode(sarCurrentGameData[7]));
        elmNewGame.appendChild(emlPlayStatus);

        Element emlPersonalRating = MainWindow.docXMLFile.createElement("personalRating");
        emlPersonalRating.appendChild(MainWindow.docXMLFile.createTextNode(sarCurrentGameData[8]));
        elmNewGame.appendChild(emlPersonalRating);

        Element emlNotes = MainWindow.docXMLFile.createElement("notes");
        emlNotes.appendChild(MainWindow.docXMLFile.createTextNode(sarCurrentGameData[9]));
        elmNewGame.appendChild(emlNotes);

        // Add the new XML 'game' node to the loaded XMl file
        MainWindow.docXMLFile.getDocumentElement().appendChild(elmNewGame);
        //</editor-fold>
        
        try {
            // Create the temp file to store the decrypted database as an XML file
            File filTempFile = new File(MainWindow.pthDatabaseFilePath.toString().replace(".encrypted", 
                    ".xml"));
            filTempFile.createNewFile();
            MainWindow.pthTempFile = filTempFile.toPath();
            
            // Decrypt the database and write it to the temp file
            CryptoUtils.mthDecryptFile(MainWindow.barEncryptionKey, MainWindow.pthDatabaseFilePath.toFile(), 
                    MainWindow.pthTempFile.toFile());
            
            // Create a XML transformer and write the loaded XML file to the temp file
            TransformerFactory tffTransformerFactory = TransformerFactory.newInstance();
            Transformer tsfTransformer = tffTransformerFactory.newTransformer();
            tsfTransformer.setOutputProperty(OutputKeys.INDENT, "yes");
            DOMSource dmsSource = new DOMSource(MainWindow.docXMLFile);
            FileOutputStream fosOutput = new FileOutputStream(MainWindow.pthTempFile.toString());
            StreamResult smrResult = new StreamResult(fosOutput);
            tsfTransformer.transform(dmsSource, smrResult);
            
            // Re-encrypt the database and delete the temp file
            CryptoUtils.mthEncryptFile(MainWindow.barEncryptionKey, MainWindow.pthTempFile.toFile(), 
                    MainWindow.pthDatabaseFilePath.toFile());
            fosOutput.close();
            filTempFile.delete();
        }
        catch (TransformerException | IOException | CryptoException exc) {
            // Log any errors and notify the user of failure
            System.err.println(new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date()) + " " + 
                    "Database editing didn't work (transformer or file error): " + exc);
            JOptionPane.showMessageDialog(this, "Game Failed To Be Added");
        }
        
        // Add the new entry to the loaded data array
        String[][] smaUpdatedRecords = new String[MainWindow.smaGameData.length + 1][10];
        System.arraycopy(MainWindow.smaGameData, 0, smaUpdatedRecords, 0, 
                MainWindow.smaGameData.length);
        smaUpdatedRecords[MainWindow.smaGameData.length] = sarCurrentGameData;
        MainWindow.smaGameData = new String[smaUpdatedRecords.length][10];
        System.arraycopy(smaUpdatedRecords, 0, MainWindow.smaGameData, 0, 
                smaUpdatedRecords.length);
        
        // Close the window, update the interface, flag 'unsaved' actions and notify the user of success
        this.dispose();
        MainWindow.mthUpdateInterface();
        MainWindow.blnIsSaved = false;
        JOptionPane.showMessageDialog(null, "Game Added Successfully");
    }
    
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSetRatingZeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetRatingZeroActionPerformed
        // Clear the rating selection
        srtRatingSelector.mthSelectRatingZero();
    }//GEN-LAST:event_btnSetRatingZeroActionPerformed

    private void btnLoadImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadImageActionPerformed
        // Create new file browser window that can only accept '.png' and .'jpg' files
        JFileChooser jfcFileBrowser = new JFileChooser(System.getProperty("user.dir") + "\\src\\main\\resources\\");
        jfcFileBrowser.addChoosableFileFilter(new FileNameExtensionFilter("PNG Files", "png"));
        jfcFileBrowser.addChoosableFileFilter(new FileNameExtensionFilter("JPEG Files", "jpg"));
        jfcFileBrowser.setAcceptAllFileFilterUsed(false);
        
        // If the open button is pressed, get the selected file and save the path
        int intResponse =  jfcFileBrowser.showOpenDialog(null);
        Path pthImageFile = null;
        if (intResponse == JFileChooser.APPROVE_OPTION) {
            pthImageFile = Paths.get(jfcFileBrowser.getSelectedFile().getAbsolutePath());
        }
        else return;
        
        /** 
         * Get the box art image from the path and resize it to fit the label
         * If the image cannot be loaded for whatever reason, the label's text states the inability to load the image
         */
        BufferedImage bimBoxArtImage = null;
        try {
            bimBoxArtImage = ImageIO.read(new File(pthImageFile.toString()));
        } catch (IOException exc) {
            System.err.println(new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date()) + " " + 
                    "Unable to load boxart image for " + sarCurrentGameData[0] + " on " + sarCurrentGameData[1]);
        }
        if (bimBoxArtImage != null) {
            lblBoxArtImage.setText("");
            Image imgBoxArtImage = bimBoxArtImage.getScaledInstance(lblBoxArtImage.getWidth(), 
                    lblBoxArtImage.getHeight(), Image.SCALE_SMOOTH);
            ImageIcon icnBoxArt = new ImageIcon(imgBoxArtImage);
            lblBoxArtImage.setIcon(icnBoxArt);
        } else {
            lblBoxArtImage.setText("Unable to load image");
        }
    }//GEN-LAST:event_btnLoadImageActionPerformed

    private void btnRemoveImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveImageActionPerformed
        // Clear the label's icon and set the text to state that there is no image
        lblBoxArtImage.setIcon(null);
        lblBoxArtImage.setText("No Image");
    }//GEN-LAST:event_btnRemoveImageActionPerformed

    /**
     * Update the local game data array to contain the information in the fields of the game data window
     * DO NOT change the order of the assignments, as some depend on others being set before them 
     */
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // Set some of the data array from the game data window fields
        sarCurrentGameData[1] = cmbPlatformSelector.getSelectedItem().toString();
        sarCurrentGameData[3] = txtGameName.getText();
        sarCurrentGameData[4] = txtMACLEntry.getText();
        sarCurrentGameData[5] = cmbClassificationSelector.getSelectedItem().toString();
        sarCurrentGameData[6] = cmbReleaseYearSelector.getSelectedItem().toString();
        sarCurrentGameData[7] = cmbPlayStatus.getSelectedItem().toString();
        sarCurrentGameData[8] = Integer.toString(srtRatingSelector.mthGetRating());
        
        // If there is no notes, set it to 'N/A' to avoid XML format issues, otherwise set it as the notes text
        if (txaNotes.getText().equals("")) {
            sarCurrentGameData[9] = "N/A";
        } else {
            sarCurrentGameData[9] = txaNotes.getText();
        }
        
        // If the window is for adding a new game, generate a game ID and add it, otherwise, update the current entry
        if ("add".equals(strWindowType)) {
            // Generate a new ID
            sarCurrentGameData[0] = sarCurrentGameData[3].substring(0, 4).toUpperCase() + sarCurrentGameData[6].substring(2);
            
            // If there is an image loaded, set the image path, otherwise set it to 'No Image'
            if (lblBoxArtImage.getIcon() != null) {
                sarCurrentGameData[2] = sarCurrentGameData[0] + ".png";
            } else {
                sarCurrentGameData[2] = "No Image";
            }
            
            // Add to database
            mthAddNewToDatabase();
        } 
        else if ("edit".equals(strWindowType)) {
            mthSaveToDatabase();
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    /**
     * Remove the current entry from the stored variables and the database file, decrypting and re-encrypting the file 
     *  before and after the editing actions, respectively
     * The interface is updated, actions are flagged as 'unsaved' and the user is notified of the success or failure 
     *  of the action
     */
    private void btnRemoveGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveGameActionPerformed
        // Confirm with the user if they wish to delete the entry
        int intConfirmExit = (int) JOptionPane.showConfirmDialog(null, 
                "Deleting entry!\nDo you wish to proceed?", "Remove Entry", JOptionPane.YES_NO_OPTION, 
                JOptionPane.ERROR_MESSAGE);
        if (intConfirmExit != 0) return;
        
        XPathFactory xpfXPathFactory = XPathFactory.newInstance();
        XPath xpaXPath = xpfXPathFactory.newXPath();
        
        try {
            // Get the node of the loaded XML file that matches the ID of the selected game
            XPathExpression xpeExpr = xpaXPath.compile("/gameList/game[@id = '" + sarCurrentGameData[0] + "']");
            Node nodCurrentNode = (Node) xpeExpr.evaluate(MainWindow.docXMLFile, XPathConstants.NODE);
            nodCurrentNode.getParentNode().removeChild(nodCurrentNode);
            
            // Update the platform list variables and the loaded XML attribute
            String strPlatformList = Arrays.toString(MainWindow.sarPlatformList);
            strPlatformList = strPlatformList.replace("[", "");
            strPlatformList = strPlatformList.replace("]", "");
            strPlatformList = strPlatformList.replace(", " + sarCurrentGameData[1], "");
            MainWindow.docXMLFile.getDocumentElement().setAttribute("platformList", strPlatformList);
            MainWindow.sarPlatformList = new String[MainWindow.sarPlatformList.length];
            MainWindow.sarPlatformList = strPlatformList.split(", ");
            MainWindow.intPlatformCount--;
            
            // Create the temp file to store the decrypted database as an XML file
            File filTempFile = new File(MainWindow.pthDatabaseFilePath.toString().replace(".encrypted", 
                    ".xml"));
            filTempFile.createNewFile();
            MainWindow.pthTempFile = filTempFile.toPath();
            
            // Decrypt the database and write it to the temp file
            CryptoUtils.mthDecryptFile(MainWindow.barEncryptionKey, MainWindow.pthDatabaseFilePath.toFile(), 
                    MainWindow.pthTempFile.toFile());
            
            // Create a XML transformer and write the loaded XML file to the temp file
            TransformerFactory tffTransformerFactory = TransformerFactory.newInstance();
            Transformer tsfTransformer = tffTransformerFactory.newTransformer();
            tsfTransformer.setOutputProperty(OutputKeys.INDENT, "yes");
            DOMSource dmsSource = new DOMSource(MainWindow.docXMLFile);
            FileOutputStream fosOutput = new FileOutputStream(MainWindow.pthTempFile.toString());
            StreamResult smrResult = new StreamResult(fosOutput);
            tsfTransformer.transform(dmsSource, smrResult);
            
            // Re-encrypt the database and delete the temp file
            CryptoUtils.mthEncryptFile(MainWindow.barEncryptionKey, MainWindow.pthTempFile.toFile(), 
                    MainWindow.pthDatabaseFilePath.toFile());
            fosOutput.close();
            filTempFile.delete();
        } catch (XPathExpressionException | TransformerException | IOException | CryptoException exc) {
            // Log any errors and notify the user of failure
            System.err.println(new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date()) + " " + exc);
            JOptionPane.showMessageDialog(this, "Game Failed To Be Removed");
        }
        
        // Update the data array and reduce its length
        String[][] smaUpdatedRecords = new String[MainWindow.smaGameData.length - 1][10];
        int intNewIndex = 0;
        for (String[] smaGameData : MainWindow.smaGameData) {
            if (!smaGameData[0].equals(sarCurrentGameData[0])) {
                smaUpdatedRecords[intNewIndex] = smaGameData;
                intNewIndex++;
            } 
            else break;
        }
        MainWindow.smaGameData = new String[smaUpdatedRecords.length][10];
        System.arraycopy(smaUpdatedRecords, 0, MainWindow.smaGameData, 0, smaUpdatedRecords.length);
        
        // Update the interface, flag 'unsaved' actions and notify the user of success
        this.dispose();
        MainWindow.mthUpdateInterface();
        MainWindow.blnIsSaved = false;
        JOptionPane.showMessageDialog(this, "Game Removed Successfully");
    }//GEN-LAST:event_btnRemoveGameActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameDataWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameDataWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameDataWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameDataWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameDataWindow().setVisible(true);
            }
        });
    }

    //<editor-fold defaultstate="collapsed" desc="Variables declaration">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnLoadImage;
    public javax.swing.JButton btnRemoveGame;
    private javax.swing.JButton btnRemoveImage;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSetRatingZero;
    private javax.swing.JComboBox<String> cmbClassificationSelector;
    private javax.swing.JComboBox<String> cmbPlatformSelector;
    private javax.swing.JComboBox<String> cmbPlayStatus;
    private javax.swing.JComboBox<String> cmbReleaseYearSelector;
    private javax.swing.JLabel lblBoxArt;
    private javax.swing.JLabel lblBoxArtImage;
    private javax.swing.JLabel lblClassification;
    private javax.swing.JLabel lblMACL;
    private javax.swing.JLabel lblNotes;
    private javax.swing.JLabel lblPlatform;
    private javax.swing.JLabel lblPlayStatus;
    private javax.swing.JLabel lblRating;
    private javax.swing.JLabel lblReleaseYear;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JScrollPane scrNotes;
    private StarRating srtRatingSelector;
    private javax.swing.JTextArea txaNotes;
    private javax.swing.JTextField txtGameName;
    private javax.swing.JTextField txtMACLEntry;
    // End of variables declaration//GEN-END:variables
    //</editor-fold>
}
